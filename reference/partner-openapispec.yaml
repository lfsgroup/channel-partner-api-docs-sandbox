openapi: "3.0.0"
info:
  version: 0.0.152
  title: FeeWise Partner API
  description: API for partners
security:
  - PartnerAuth: [ ]
    APIAuth: [ ]

tags:
  - name: Payments
    description: Creation and retrieval of payment requests ( Invoices and Trust Deposits ) and client payments.
  - name: Webhook
    description: Webhook management
  - name: Firm
    description: View details about a firm and it's accounts.
  - name: Partner
    description: View and manage partner details.
  - name: Bank Account
    description: View details about a firm linked bank accounts.
  - name: API Key
    description: API Key management
  - name: Transactions
    description: Retrieve payment transactions
  - name: Payouts
    description: Payouts from the platform to the firms


paths:
  /api/v3/partner/invoices:
    post:
      summary: Create an Invoice
      description: |
        Create an invoice for a channel partner.  
        NB the fields `invoice_id`, `payment_uri` and `status` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the invoice has been created and will be available in the response.
        The external_id is a unique field, if the same external_id is provided, the matching invoice will be updated instead.
      operationId: createInvoice
      tags:
        - Payments
      requestBody:
        description: Invoice details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invoice'
            example:
              firm_id: facade00-0000-4000-a000-000000000000
              external_id: e69f9433-885b-4321-bb48-9f5084850893
              amount: '123.45'
              settlement_account_type: Office
              external_reference: inv-123
              currency: AUD
              due_date: '1953-07-23T13:56:24.084Z'
              surcharge_choice_override: Customer
              description: Charge for case setup
              matter: {
                external_id: my-unique-external-id,
                external_reference: my-external-reference,
                description: 'The matter of Frank vs Herman ',
                type: court
              }
              debtor: {
                external_id: case-client-1234,
                name: Frank,
                email: frank@email.com,
                contact_number: '1300234567'
              }

              line_items: [
                {
                  amount: '100',
                  name: Phone call,
                  description: Listened to voice message,
                  quantity: 1,
                  tax_rate: '10',
                }, {
                  amount: '1000',
                  name: Phone call,
                  description: Replied to voice mail,
                  quantity: 1,
                  tax_rate: '15'
                }
              ]
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
              payment_methods_override: [
                'Card'
              ]
      responses:
        '200':
          description: Created Invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
              example:
                invoice:
                  invoice_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: '123.45'
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman ',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: '10',
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
                  status: Submitted
        '409':
          description: Invalid settlement account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: settlement account is invalid.
                title: Conflict
                type: invalid_settlement_account

  /api/v3/partner/invoices/{invoice_id}:
    parameters:
      - in: path
        name: invoice_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a specified invoice by id.
      description: Get a specified invoice by id.
      tags:
        - Payments
      operationId: getInvoiceById
      responses:
        '200':
          description: Found the requested invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '400':
          description: Bad request
        '404':
          description: Requested invoice not found
        '500':
          description: Error processing

  /api/v3/partner/firms/{firm_id}/payouts:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

      - name: from
        in: query
        description: |
          Return payouts since this timestamp. If not supplied, "from" defaults to the last 7 days".
        schema:
          type: string
          format: date-time
        required: false
        example: '2023-09-20T00:00:00.000Z'

      - name: to
        in: query
        description: |
          Return payouts created before timestamp. If not supplied, "to" defaults to now.
        schema:
          type: string
          format: date-time
        required: false
        example: '2023-09-20T00:00:00.000Z'

      - name: page
        in: query
        description: |
          Pagination - Page number to return
        schema:
          type: integer
          default: 1
          maximum: 10000
          minimum: 1

      - name: page_size
        in: query
        description: |
          Pagination - payouts per page
        schema:
          type: integer
          default: 20
          maximum: 100
          minimum: 5

      - name: sort_by
        in: query
        description: Field to sort by, from the payout model
        schema:
          type: string
          enum: [account_id, account_type, date, payout_total, payment_method, payout_reference, status]
          default: date

      - name: order
        in: query
        description: |
          Sorting order (asc or desc). Default is desc
        schema:
          type: string
          enum: [asc, desc]
          default: desc

      - name: status_filter
        in: query
        explode: false
        style: form
        description: |
          Filter by status
          nb: Example usage, comma separated, in query... /payouts?status_filter=Paid,Initialised
        schema:
          type: array
          items:
            type: string
            enum: [Submitted, Paid, Failed, Cancelled]

      - name: account_id_filter
        in: query
        explode: false
        style: form
        description: |
          Filter by account id
          nb: Example usage, comma separated, in query... /payouts?account_id=57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b
        schema:
          type: array
          items:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid


    get:
      description: |
        Search for payouts for a channel partner..        
        Filters supplied in the query params must *all* be met.
      operationId: getPayoutsForFirm
      tags:
        - Payouts
      responses:
        '200':
          description: List of payouts for the firm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PayoutsResponse'
              example:
                pagination_metadata:
                  current_page_end_index: 10
                  current_page_start_index: 1
                  requested_account_id_filter: [ ]
                  requested_from_date: "2023-09-21T00:00:00Z"
                  requested_page: 1
                  requested_page_size: 10
                  requested_sort_by: account_id
                  requested_sort_order: desc
                  requested_status_filter:
                    - Paid
                    - Failed
                  requested_to_date: "2023-10-16T11:47:44.294633+11:00"
                  total_pages: 1
                  total_records: 2
                payouts:
                  - account:
                      account_id: d986578d-fe03-4dc2-8fb7-28c579ee45ec
                      account_number: "000123456789"
                      account_type: Office
                      alias: Office Account
                      branch_code: "110000000"
                      country_code: US
                    date: "2023-10-13T04:24:33.187608Z"
                    firm_id: facade00-0000-4000-a000-000000000000
                    payout_reference: fw.65715ef8a
                    payout_total: "2227.72"
                    status: Paid
                    transactions:
                      - artifact_id: c6486563-0fd5-4133-bf56-cdead15a9669
                        artifact_type: Invoice
                        currency: USD
                        date: "2023-10-13T04:23:57.709114Z"
                        external_id: lovemi-668E5BFE-F502-471E-8D55-CFCAF0C6407E
                        paid_out: "2227.72"
                        payment_id: 4ff25d55-262d-4ab1-ab83-aeb09159ac9b
                        payment_type: Card
                        received: "2227.72"
                        refunded: "0"
                        transaction_id: c624e88c-f5be-4e16-b6ab-044018377261
                  - account:
                      account_id: d986578d-fe03-4dc2-8fb7-28c579ee45ec
                      account_number: "000123456789"
                      account_type: Office
                      alias: Office Account
                      branch_code: "110000000"
                      country_code: US
                    date: "2023-10-13T04:26:04.002252Z"
                    firm_id: facade00-0000-4000-a000-000000000000
                    payout_reference: fw.01c433c3a
                    payout_total: "5969.5"
                    status: Paid
                    transactions:
                      - artifact_id: 64156c73-caab-47dc-92d9-9b6d18c6714f
                        artifact_type: Charge
                        currency: USD
                        date: "2023-10-13T04:24:42.60469Z"
                        external_id: lovemi-D57607FA-5F74-4CFF-B78C-D10C35ED15D6
                        metadata:
                          creator: lovemi
                          firm_id: facade00-0000-4000-a000-000000000000
                          my_external_id: lovemi-571BA434-BFDA-48FA-9E61-94207D611A0C
                        paid_out: "5969.5"
                        payment_id: 968842e4-7247-4d2a-9105-7ef0c5b773bb
                        payment_type: Card
                        received: "5969.5"
                        refunded: "0"
                        transaction_id: 98359c67-cc3a-4e73-898b-b00565e52666
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/transactions/{transaction_id}:
    parameters:
      - in: path
        name: transaction_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      description: Retrieve a transaction by id.
      operationId: getTransactionById
      tags:
        - Transactions
      responses:
        '200':
          description: Firm transaction with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
              example:
                firm_id: facade00-0000-4000-a000-000000000000
                transaction:
                  account_alias: Office Account
                  account_id: d986578d-fe03-4dc2-8fb7-28c579ee45ec
                  account_type: Office
                  amount: "999.68"
                  customer_payment_method:
                    card:
                      scheme: visa
                      scheme_partial_number: "0077"
                    payment_method: Card
                  debtor:
                    external_id: ""
                    first_name: Joe
                    last_name: Bloggs
                  matter_description: 'The matter of Joe vs Bloggs '
                  matter_reference: Joes-inv
                  payer_details:
                    address: 25 Smith St, Sydney, New South Wales, 2000, AU
                    email: devops+example@rapidpaylegal.com
                    name: Jimmy Generous
                  payment_date: "2023-10-09T03:40:22.477921Z"
                  payment_reference: 0257f4c3-0ec0-4ff3-bc0f-16581b095f77
                  payout_id: 13bf5ee1-47ec-41e2-b292-3b3be50fca58
                  reference: Joes-inv
                  status: Paid
        '400':
          description: Transaction search parameter invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'








# Paginated transactions V4 endpoint
  /api/v4/partner/firms/{firm_id}/transactions:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

      - name: from
        in: query
        description: |
          Return transactions since this timestamp. If not supplied, "from" defaults to the last 7 days".
        schema:
          type: string
          format: date-time
        required: false
        example: '2023-09-20T00:00:00.000Z'

      - name: to
        in: query
        description: |
          Return payments created before timestamp. If not supplied, "to" defaults to now.
        schema:
          type: string
          format: date-time
        required: false
        example: '2023-09-20T00:00:00.000Z'

      - name: page
        in: query
        description: |
          Pagination - Page number to return
        schema:
          type: integer
          default: 1
          maximum: 10000
          minimum: 1

      - name: page_size
        in: query
        description: |
          Pagination - Transactions per page
        schema:
          type: integer
          default: 20
          maximum: 100
          minimum: 5

      - name: sort_by
        in: query
        description: Field to sort by, from the transaction model
        schema:
          type: string
          enum: [account_id, account_type, amount, matter_reference, payment_date, payment_method, reference, scheme, status]
          default: payment_date

      - name: order
        in: query
        description: |
          Sorting order (asc or desc). Default is desc
        schema:
          type: string
          enum: [asc, desc]
          default: desc

      - name: status_filter
        in: query
        explode: false
        style: form
        description: |
          Filter by status
          nb: Example usage, comma separated, in query... /transactions?status_filter=Paid,Initialised
        schema:
          type: array
          items:
            type: string
            enum: [Clearing,Failed,Initialised,Paid,Processing]

      - name: account_id_filter
        in: query
        explode: false
        style: form
        description: |
          Filter by account id
          nb: Example usage, comma separated, in query... /transactions?account_id=57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b
        schema:
          type: array
          items:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid


    get:
      description: |
        Search for transactions for a channel partner..        
        Filters supplied in the query params must *all* be met.
      operationId: getFirmTransactionsV4
      tags:
        - Transactions
      responses:
        '200':
          description: List of transactions for the firm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponseV2'
              example:
                pagination_metadata:
                  current_page_end_index: 10
                  current_page_start_index: 1
                  requested_from_date: "2023-09-05T00:00:00Z"
                  requested_page: 1
                  requested_page_size: 10
                  requested_sort_by: payment_date
                  requested_sort_order: desc
                  requested_status_filter:
                    - Processing
                    - Paid
                  requested_to_date: "2023-10-09T16:48:12.131776+11:00"
                  total_pages: 1
                  total_records: 1
                transactions:
                  - account_alias: Office Account
                    account_id: d986578d-fe03-4dc2-8fb7-28c579ee45ec
                    account_type: Office
                    amount: "999.68"
                    customer_payment_method:
                      card:
                        scheme: visa
                        scheme_partial_number: "0077"
                      payment_method: Card
                    debtor:
                      external_id: ""
                      first_name: Joe
                      last_name: Bloggs
                    matter_description: 'The matter of Joe vs Bloggs '
                    matter_reference: Joes-inv
                    payer_details:
                      address: 25 Smith St, Sydney, New South Wales, 2000, AU
                      email: devops+example@rapidpaylegal.com
                      name: Jimmy Generous
                    payment_date: "2023-10-09T03:40:22.477921Z"
                    payment_reference: 0257f4c3-0ec0-4ff3-bc0f-16581b095f77
                    payout_id: 13bf5ee1-47ec-41e2-b292-3b3be50fca58
                    reference: Joes-inv
                    status: Paid

        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


    # Deprecated endpoint - to be removed in future, see v4 endpoint
  /api/v3/partner/firms/{firm_id}/transactions:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

      - name: from
        in: query
        description: |
          Return transactions since this timestamp. If not supplied, "from" defaults to the last 7 days".
        schema:
          type: string
          format: date-time
        required: false
        example: '2023-09-20T00:00:00.000Z'

      - name: to
        in: query
        description: |
          Return payments created before timestamp. If not supplied, "to" defaults to now.
        schema:
          type: string
          format: date-time
        required: false
        example: '2023-09-20T00:00:00.000Z'

      - name: page
        in: query
        description: |
          Pagination - Page number to return
        schema:
          type: integer
          default: 1
          maximum: 10000
          minimum: 1

      - name: page_size
        in: query
        description: |
          Pagination - Transactions per page
        schema:
          type: integer
          default: 20
          maximum: 100
          minimum: 5

      - name: sort_by
        in: query
        description: Field to sort by, from the transaction model
        schema:
          type: string
          enum: [account_id, account_type, amount, matter_reference, payment_date, payment_method, reference, scheme, status]
          default: payment_date

      - name: order
        in: query
        description: |
          Sorting order (asc or desc). Default is desc
        schema:
          type: string
          enum: [asc, desc]
          default: desc

      - name: status_filter
        in: query
        explode: false
        style: form
        description: |
          Filter by status
          nb: Example usage, comma separated, in query... /transactions?status_filter=Paid,Initialised
        schema:
          type: array
          items:
            type: string
            enum: [Clearing,Failed,Initialised,Paid,Processing]

      - name: account_id_filter
        in: query
        explode: false
        style: form
        description: |
          Filter by account id
          nb: Example usage, comma separated, in query... /transactions?account_id=57d43c4e-f18d-40ae-9511-2aeafbf68def,b7dc7851-5cc4-41d5-8174-f00ad916f76b
        schema:
          type: array
          items:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid


    get:
      description: |
        Search for transactions for a channel partner..        
        Filters supplied in the query params must *all* be met.
        NB: This endpoint is deprecated and will be removed in future. Please use the v4 endpoint instead.
      deprecated: true
      operationId: getFirmTransactions
      tags:
        - Transactions
      responses:
        '200':
          description: List of transactions for the firm
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionsResponse'
              example:
                pagination_metadata:
                  current_page_end_index: 10
                  current_page_start_index: 1
                  requested_from_date: "2023-09-05T00:00:00Z"
                  requested_page: 1
                  requested_page_size: 10
                  requested_sort_by: payment_date
                  requested_sort_order: desc
                  requested_status_filter:
                    - Processing
                    - Paid
                  requested_to_date: "2023-10-09T16:48:12.131776+11:00"
                  total_pages: 1
                  total_records: 1
                transactions:
                  - account_alias: Office Account
                    account_id: d986578d-fe03-4dc2-8fb7-28c579ee45ec
                    account_type: Office
                    amount: "999.68"
                    customer_payment_method:
                      card:
                        scheme: visa
                        scheme_partial_number: "0077"
                      payment_method: Card
                    debtor:
                      external_id: ""
                      first_name: Joe
                      last_name: Bloggs
                    matter_description: 'The matter of Joe vs Bloggs '
                    matter_reference: Joes-inv
                    payer_details:
                      address: 25 Smith St, Sydney, New South Wales, 2000, AU
                      email: devops+example@rapidpaylegal.com
                      name: Jimmy Generous
                    payment_date: "2023-10-09T03:40:22.477921Z"
                    payment_reference: 0257f4c3-0ec0-4ff3-bc0f-16581b095f77
                    payout_id: 13bf5ee1-47ec-41e2-b292-3b3be50fca58
                    reference: Joes-inv
                    status: Paid

        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'












  /api/v3/partner/invoices/{invoice_id}/adjust-amount:
    parameters:
      - in: path
        name: invoice_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      deprecated: true
      summary: Adjust an invoice.
      description: |
        Adjust the invoice amount after the invoice has been created. 
        If an adjustment is for an invoice outside of FeeWise, it should be adjusted using this endpoint.
        If the invoice has no payments, the total amount will be updated to the adjustment amount.
        
        If a payment has already been made to the existing invoice, the adjustment request will fail.

      operationId: adjustInvoiceAmount
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                Adjust the invoice amount
              properties:
                new_amount:
                  type: string
                  format: decimal
                  x-go-type: decimal.Decimal
                  x-go-type-import:
                    path: github.com/shopspring/decimal
                  description: The new total amount for the invoice.
              example:
                new_amount: '7890.12'
              required:
                -   new_amount

      responses:
        '200':
          description: The adjustment was recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
              example:
                invoice:
                  invoice_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: '7890.12'
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman ',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: '10',
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/bf311c82-a0d1-4e31-998b-f00de9250d4a
                  status: Submitted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Requested invoice not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Requested invoice is not in the correct state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/owner:
    post:
      summary: Create Firm Account Owner
      description: Create a firm account owner, once activated, they can sign into the FeeWise dashboard.
      operationId: createFirmAccountOwner
      tags:
        - Firm
      parameters:
        - in: path
          name: firm_id
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
      requestBody:
        description: Firm account owner details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                first_name:
                  type: string
                last_name:
                  type: string
              required:
                - email
                - first_name
                - last_name
            example:
              email: support@rapidpaylegal.com
              first_name: Mickey
              last_name: Haller
      responses:
        '204':
          description: Successfully created firm account owner
        '401':
          description: Unauthorized error
        '404':
          description: Firm not found
        '409':
          description: Firm User email duplicates existing
        '500':
          description: Internal Server Error

  /api/v3/partner/invoices/firm/{firm_id}/{external_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: external_id
        required: true
        schema:
          type: string
    get:
      summary: Get invoice by external_id
      description: |
        Get an invoice for a firm by the external_id. 
        NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact 
        with a unique id (external_id) that is meaningful for their system).
      tags:
        - Payments
      operationId: getInvoiceByExternalId
      responses:
        '200':
          description: Found the requested invoice
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceResponse'
        '400':
          description: Bad request
        '404':
          description: Requested invoice not found
        '500':
          description: Error processing


  /api/v3/partner/trust-deposits:
    post:
      summary: Create a Trust Deposit
      description: |
        Create a trust deposit for a channel partner.  
        NB the fields trust_deposit_id, payment_uri and status must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the trust deposit has been created and will be available in the response.
        The external_id is a unique field, if the same external_id is provided, the matching trust deposit will be updated instead.
      operationId: createTrustDeposit
      tags:
        - Payments
      requestBody:
        description: Trust deposit details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrustDeposit'
            example:
              firm_id: facade00-0000-4000-a000-000000000000
              external_id: e69f9433-885b-4321-bb48-9f5084850893
              amount: '123.45'
              external_reference: inv-123
              currency: AUD
              due_date: '1953-07-23T13:56:24.084Z'
              surcharge_choice_override: Customer
              description: Charge for case setup
              matter: {
                external_id: my-unique-external-id,
                external_reference: my-external-reference,
                description: 'The matter of Frank vs Herman',
                type: court
              }
              debtor: {
                external_id: case-client-1234,
                name: Frank,
                email: frank@email.com,
                contact_number: '1300234567'
              }

              line_items: [
                {
                  amount: '100',
                  name: Phone call,
                  description: Listened to voice message,
                  quantity: 1,
                  tax_rate: "10",
                }, {
                  amount: '1000',
                  name: Phone call,
                  description: Replied to voice mail,
                  quantity: 1,
                  tax_rate: '15'
                }
              ]
              notes: [
                'Got to know client',
                'Created initial case file'
              ]
              payment_methods_override: [
                'Card'
              ]
      responses:
        '200':
          description: Created Trust Deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
              example:
                trust_deposit:
                  trust_deposit_id: 96ccd810-d21a-4d56-8ad9-956328e2b802
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: '123.45'
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: "10",
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/96ccd810-d21a-4d56-8ad9-956328e2b802
                  status: Submitted
        '409':
          description: Invalid settlement account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: settlement account is invalid.
                title: Conflict
                type: invalid_settlement_account

  /api/v3/partner/trust-deposits/{trust_deposit_id}:
    parameters:
      - in: path
        name: trust_deposit_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a Trust Deposit by id.
      description: Get a Trust Deposit by the specified trust_deposit_id.
      tags:
        - Payments
      operationId: getTrustDepositById
      responses:
        '200':
          description: Found the requested Trust Deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
        '400':
          description: Bad request
        '404':
          description: Requested Trust Deposit not found
        '500':
          description: Error processing

  /api/v3/partner/trust-deposits/firm/{firm_id}/{external_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: external_id
        required: true
        schema:
          type: string
    get:
      summary: Get Trust Deposit by external_id
      description: |
        Get a trust deposit for a firm by the external_id.
        NB During artifact (e.g. Invoice or Trust Deposit) creation, FeeWise channel partners can create an artifact
        with a unique id (external_id) that is meaningful for their system).
      tags:
        - Payments
      operationId: getTrustDepositByExternalId
      responses:
        '200':
          description: Found the requested trust deposit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
        '400':
          description: Bad request
        '404':
          description: Requested trust deposit not found
        '500':
          description: Error processing

  /api/v3/partner/trust-deposits/{trust_deposit_id}/adjust-amount:
    parameters:
      - in: path
        name: trust_deposit_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      deprecated: true
      summary: Adjust an trust deposit.
      description: |
        Adjust the trust deposit amount after the trust deposit has been created. 
        If an adjustment is for an trust deposit outside of FeeWise, it should be adjusted using this endpoint.
        If the trust deposit has no payments, the total amount will be updated to the adjustment amount.
        
        If a payment has already been made to the existing trust deposit, the adjustment request will fail.

      operationId: adjustTrustDepositAmount
      tags:
        - Payments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: |
                Adjust the trust deposit amount
              properties:
                new_amount:
                  type: string
                  format: decimal
                  x-go-type: decimal.Decimal
                  x-go-type-import:
                    path: github.com/shopspring/decimal
                  description: The new total amount for the trust deposit.
              example:
                new_amount: '7890.12'
              required:
                - new_amount

      responses:
        '200':
          description: The adjustment was recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrustDepositResponse'
              example:
                trust_deposit:
                  trust_deposit_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  external_id: e69f9433-885b-4321-bb48-9f5084850893
                  amount: "7890.12"
                  external_reference: inv-123
                  currency: AUD
                  due_date: '1953-07-23T13:56:24.084Z'
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  matter: {
                    external_id: my-unique-external-id,
                    external_reference: my-external-reference,
                    description: 'The matter of Frank vs Herman ',
                    type: court
                  }
                  debtor: {
                    external_id: case-client-1234,
                    name: Frank,
                    email: frank@email.com,
                    contact_number: '1300234567'
                  }
                  line_items: [
                    {
                      amount: '100',
                      name: Phone call,
                      description: Listened to voice message,
                      quantity: 1,
                      tax_rate: '10',
                    }, {
                      amount: '1000',
                      name: Phone call,
                      description: Replied to voice mail,
                      quantity: 1,
                      tax_rate: '15'
                    }
                  ]
                  notes: [
                    'Got to know client',
                    'Created initial case file'
                  ]
                  payment_methods_override: [
                    'Card'
                  ]
                  payment_uri: http://localhost:8080/pay/bf311c82-a0d1-4e31-998b-f00de9250d4a
                  status: Submitted
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Requested trust deposit not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Requested trust deposit is not in the correct state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/webhooks:
    get:
      summary: Get list of webhooks for the partner
      description: Get list of webhooks for the partner
      operationId: getWebhooks
      tags:
        - Webhook
      responses:
        '200':
          description: List of webhooks
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookList'
              example:
                webhooks: [
                  {
                    name: mywebhook,
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    description: Testing my webhook,
                    url: 'https://to.me',
                    status: Enabled,
                    events: [
                      'artifact.invoice.created',
                      'payout.paid'
                    ],
                    authentication: {
                      type: 'bearer_token, basic_auth',
                      data: {
                        username: me,
                        password: password
                      },
                      add_position: 'header, body'
                    }
                  }
                ]

        '500':
          description: Error processing
          content:
            application/jsopn:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a webhook
      description: Create a webhook
      operationId: createWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook details. webhook_id must not be supplied. If it is, the POST will be considered a BadRequest
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
            examples:
              bearer_token:
                value:
                  {
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    name: mywebhook,
                    description: Testing my webhook,
                    url: https://to.me,
                    status: Enabled,
                    authentication: {
                      type: bearer_token,
                      data: {
                        token: abcdef12345,
                      },
                      add_position: header
                    },
                    events: [
                      'artifact.invoice.created',
                      'payout.paid'
                    ]
                  }

              basic_auth:
                value:
                  {
                    party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                    name: mywebhook,
                    description: Testing my webhook,
                    url: https://to.me,
                    status: Enabled,
                    authentication: {
                      type: basic_auth,
                      data: {
                        username: myusername,
                        password: password123
                      },
                      add_position: header
                    },
                    events: [
                      'artifact.invoice.created',
                      'payout.paid'
                    ]
                  }
      responses:
        '200':
          description: Created Webhook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse' # NB - the details with the webhook_id
              example:
                webhook: {
                  name: mywebhook,
                  party_id: 732c73fc-1778-4acd-b334-20a2f49c2766,
                  description: Testing my webhook,
                  events: [
                    'artifact.invoice.created',
                    'payout.paid'
                  ],
                  status: Enabled,
                  url: https://to.me,
                  webhook_id: 65b3faf7-1156-4849-bc05-89e10d0bbacd,
                  authentication: {
                    add_position: 'header, body',
                    data: {
                      password: password,
                      username: me
                    },
                    type: 'bearer_token, basic_auth'
                  },
                }
        '409':
          description: A webhook already exists for the partyId with the same url and events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

        '500':
          description: Error processing
          content:
            application/jsopn:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      summary: Update a webhook
      description: Update a webhook
      operationId: updateWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Webhook'
      responses:
        '200':
          description: Webhook updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResponse' # NB - the details with the webhook_id
        '404':
          description: The specified webhook (by webhook_id) not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: The update causes a conflict with an existing webhook (same partyId, url and events).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/webhooks/{webhook_id}:
    parameters:
      - in: path
        name: webhook_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    delete:
      description: Delete a webhook by id
      summary: Delete Webhook
      operationId: deleteWebhook
      tags:
        - Webhook
      responses:
        '204':
          description: Deleted Webhook
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/events/topics:
    get:
      summary: Get a list of event topics for the channel partner
      description: |
        All currently available event topics for the channel partner are returned.         
        The channel partner is derived from the PartnerAuth security context
      operationId: getChannelPartnerEventTopics
      tags:
        - Webhook
      responses:
        '200':
          description: List of currently available event topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventTopics'
              example:
                event_topics: [
                  'artifact.invoice.created',
                  'artifact.trust-deposit.created'
                ]
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/events:
    get:
      summary: Get a list of events for the channel partner
      description: |
        Returns events for the channel partner matching the filter criteria.        
        The filters supplied in the query params must *all* be met.        
        The channel partner is derived from the PartnerAuth security context.
      operationId: getChannelPartnerWebhookEvents
      tags:
        - Webhook
      parameters:
        - in: query
          name: topic
          schema:
            type: string
          example: payout.paid
          required: false
        - in: query
          name: since_webhook_event_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            If supplied, all events since this webhook event was sent, are retrieved. The retrieved events are subject to the 
            other filter params (topic, status).  
            NB - 'since_webhook_event_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
          required: false
        - in: query
          name: since
          description: |
            Return events sent since this timestamp. If not supplied, events for the last 24 hours are returned.  
            NB - 'since_webhook_event_id' and 'since' are mutually exclusive. Supplying both results in a BadRequest error.
          schema:
            type: string
            format: date-time
          required: false
          example: "2023-09-01T00:00:00Z"
        - in: query
          name: status
          description: Webhook send status
          schema:
            $ref: '#/components/schemas/WebhookSendStatus'
          required: false
      responses:
        '200':
          description: List of matching events
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Events'
              example:
                events: [
                  {
                    "webhook_event_id": "96d5e476-35d1-4209-a672-d179e0b5111c",
                    "externalId": "bd7fc497-8ad3-4a1f-9a07-7d364e7ab011",
                    "topic": "payout.paid",
                    "status": "sent",
                    "sent_at": "2022-07-28T05:39:32.029314Z",
                    "payload": {
                      "topic": "payout.paid",
                      "object": {
                        "payments": [
                          { "currency": "AUD", "artifact_id": "e9c42bc6-b7b3-4e24-a416-eda2a8c5cae2", "card_scheme": "MASTERCARD", "submit_time": "2022-07-26T04:54:20Z", "payment_type": "card", "total_amount": "3363.51", "artifact_type": "ArtifactInvoice", "payment_reference": "qp.14f4c4207", "card_number_partial": "1555", "customer_surcharge_amount": "61.09", "merchant_surcharge_amount": "0" }
                        ],
                        "branch_code": "063-074",
                        "account_type": "Office",
                        "account_number": "10069576",
                        "disbursed_amount": "3302.42",
                        "disbursement_date": "2022-07-26T22:28:45.918809Z",
                        "disbursement_reference": "qp.14f4c4207",
                        "batch_disbursement_reference": "rp.af27f7727"
                      },
                      "event_id": "612d6c74-78e8-4c69-915b-cc05d92e5372",
                      "party_id": "ca838b5d-8064-4910-aa54-bce2e6e81fbc",
                      "created_at": "2022-07-27T04:02:26.662446Z",
                      "channel_partner_id": "5ca1ab1e-cafe-4000-a000-deadbeefdead"
                    },
                  },
                ]
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/payouts:
    parameters:
      - in: query
        name: since
        required: false
        description: |
          Return payouts since this timestamp. 
          If not supplied, payouts for the last 24 hours are returned.
        schema:
          type: string
          format: date-time
        example: '2022-07-29T15:33:00Z'

    get:
      description: |
        Get list of payouts for the channel partner since the provided timestamp. 
        If not supplied, payouts for the last 24 hours are returned.
        The channel partner is derived from the PartnerAuth security context

      summary: Get payouts for the channel partner
      operationId: getChannelPartnerPayouts
      tags:
        - Payouts
      responses:
        '200':
          description: List of matching Payouts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payouts'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/payouts/firms/{firm_id}:
    parameters:
      - in: path
        name: firm_id
        description: |
          ID of the firm whose payouts are to be retrieved
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: query
        name: since
        required: false
        description: |
          Return payouts, for the given channel partner / firm, sent since this timestamp. 
          If not supplied, payouts for the last 24 hours are returned.
        schema:
          type: string
          format: date-time
        example: '2022-07-29T15:33:00Z'

    get:
      deprecated: true
      description: |
        DEPRECATED - Use /api/v3/partner/firms/<firm_id>/payouts endpoint instead
  
        Get list of payouts for the specified firm. 
        If the since parameter is not supplied, payouts for the last 24 hours are returned.
      summary: Get payouts for the specified firm
      operationId: getFirmPayouts
      tags:
        - Payouts
      responses:
        '200':
          description: List of matching Payouts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payouts'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/payments:
    get:
      deprecated: true
      summary: DEPRECATED use /transactions - Search for payments for the channel partner
      description: |
        Search for payments for a channel partner..        
        The filters supplied in the query params must *all* be met.        
        The channel partner is derived from the PartnerAuth security context.
      operationId: getChannelPartnerPayments
      tags:
        - Payments
      parameters:
        - name: payment_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get a specific payment. If this is specified, other query params should not be specified 
            and will result in a BadRequest if the are.
        - name: artifact_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get payments only for the specified artifact (Invoice/Trust Desposit)
        - name: firm_id
          in: query
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          description: |
            Get payments going to a specific firm
        - name: since
          in: query
          description: |
            Return payments sent since this timestamp. If not supplied, payments for the last 24 hours are returned.
          schema:
            type: string
            format: date-time
          required: false
          example: '2022-07-29T15:33:00'
      responses:
        '200':
          description: List of matching payments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payments'
        '400':
          description: Incompatible search parameters supplied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/firms:
    post:
      summary: Create a new firm
      description: >
        The createFirm API endpoint facilitates the onboarding of a new firm into the current system. The endpoint allows clients to initiate the onboarding process for their respective firms. Upon a successful http response, the firm's status will be set to "pending" in FeeWise.
        The onboarding process follows a two-step procedure. Initially, the operational team will review the firm's details and perform necessary verifications. Once the firm's information has been validated and approved by the operational team, the firm will be officially onboarded into FeeWise.
        During the onboarding approval process, a webhook will be triggered for the "firm.onboarded" event. The webhook serves as a notification mechanism, enabling integrations and external systems to be updated about the newly onboarded firm.
        It is important to note that the onboarding process might take some time to complete, as it involves manual verification steps by the operational team. However, clients can track the status of their firm through FeeWise and receive real-time updates through the webhook once the firm onboarding is successfully approved.
        Please ensure that all necessary information is provided accurately when using this API endpoint to avoid delays in the onboarding process. Additionally, clients should handle the webhook appropriately to capture the "firm.onboarded" event and update their internal systems accordingly.
        Roles must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner.
        All owners of the firm with greater that 25% must be specified in the roles.

      operationId: createFirm
      tags:
        - Firm
      requestBody:
        description: Firm Details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFirm'
            example:
              company:
                external_id: firm_123
                legal_name: My Firm LLC
                legal_identifier: '0654047864'
                legal_structure: PrivateCorporation
                trading_name: My Firm
                tax_id: '12-3456789'
                website: https://rapidpaylegal.com.au/
                support_email: support@getfeewise.com
                support_number: (323) 467-7124
                contact_email: support@getfeewise.com
                contact_number: (323) 467-7124
                billing_email: support@getfeewise.com
                billing_number: (323) 467-7124
              address:
                address1: 5969 Melrose Ave,
                city: Los Angeles
                state_code: CA
                postal_code: '90038'
                country_code: US
              office_account:
                account_type: Office
                country_code: AU
                account_name: John Smith
                account_holder_type: Company
                branch_code: '110000000'
                account_number: '000123456789'
                address: 123 Main St
                alias: Office Account
                bank: Rapid Bank of Australia
              trust_account:
                account_type: Trust
                country_code: AU
                account_name: John Smith
                account_holder_type: Company
                branch_code: '110000000'
                account_number: '000111111116'
                address: 123 Main St
                alias: Trust Account
                bank: Rapid Bank of Australia
              terms_of_service:
                document_name: FeeWise Terms of Service
                accepted: '2022-10-26T04:59:59.690Z'
                accepted_ip: '192.168.1.1'

      responses:
        '201':
          description: Firm successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmDetails'
              example:
                company:
                  firm_id: 6901804a-66eb-4ec9-b01d-931bd2cc6940
                  external_id: firm_123"
                  legal_name: My Firm LLC
                  legal_identifier: '0654047864'
                  legal_structure: PrivateCorporation
                  trading_name: My Firm
                  tax_id: '12-3456789'
                  website: https://rapidpaylegal.com.au/
                  support_email: support@getfeewise.com
                  support_number: (323) 467-7124
                  contact_email: support@getfeewise.com
                  contact_number: (323) 467-7124
                  billing_email: support@getfeewise.com
                  billing_number: (323) 467-7124
                address:
                  address1: 5969 Melrose Ave,
                  city: Los Angeles
                  state_code: CA
                  postal_code: '90038'
                  country_code: US
                accounts:
                  - account_id: b6fb6bd2-1ae1-4784-896f-1d00a9457c44
                    account_type: Office
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000123456789'
                    address: 123 Main St
                    alias: Office Account
                    bank: Rapid Bank of Australia
                    is_default: true
                  - account_id: 4c2cc488-1d71-4a2b-b226-4c6e5ce85470
                    account_type: Trust
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000111111116'
                    address: 123 Main St
                    alias: Trust Account
                    bank: Rapid Bank of Australia
                    is_default: true
                roles: []
                terms_of_service:
                  document_name: FeeWise Terms of Service
                  accepted: '2022-10-26T04:59:59.690Z'
                  accepted_ip: '192.168.1.1'
        '400':
          description: Bad JSON request or request contains an invalid uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Channel Partner Not Found
        '409':
          description: External ID is not unique or a Bank Account is invalid
        '500':
          description: Internal Server Error
    get:
      summary: Get firms
      description: get all firms for current channel partner
      operationId: getFirms
      tags:
        - Firm

      responses:
        '200':
          description: Firms have been retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmsResponse'
              example:
                firms:
                - company:
                    firm_id: 6901804a-66eb-4ec9-b01d-931bd2cc6940
                    external_id: firm_123"
                    legal_name: My Firm LLC
                    legal_identifier: '0654047864'
                    legal_structure: PrivateCorporation
                    trading_name: My Firm
                    tax_id: '12-3456789'
                    website: https://rapidpaylegal.com.au/
                    support_email: support@getfeewise.com
                    support_number: (323) 467-7124
                    contact_email: support@getfeewise.com
                    contact_number: (323) 467-7124
                    billing_email: support@getfeewise.com
                    billing_number: (323) 467-7124
                    status: Active
                  address:
                    address1: 5969 Melrose Ave,
                    city: Los Angeles
                    state_code: CA
                    postal_code: '90038'
                    country_code: US
                  accounts:
                  - account_id: b6fb6bd2-1ae1-4784-896f-1d00a9457c44
                    account_type: Office
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000123456789'
                    address: 123 Main St
                    alias: Office Account
                    bank: Rapid Bank of Australia
                    is_default: true
                  - account_id: 4c2cc488-1d71-4a2b-b226-4c6e5ce85470
                    account_type: Trust
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000111111116'
                    address: 123 Main St
                    alias: Trust Account
                    bank: Rapid Bank of Australia
                    is_default: true
                - company:
                    firm_id: 8901804a-66eb-4ec9-b01d-931bd2cc6945
                    external_id: firm_456
                    legal_name: My Firm LLC 2
                    legal_identifier: '0654047864'
                    legal_structure: PrivateCorporation
                    trading_name: My Firm 2
                    tax_id: '12-3456789'
                    website: https://rapidpaylegal.com.au/
                    support_email: support@getfeewise.com
                    support_number: (323) 467-7124
                    contact_email: support@getfeewise.com
                    contact_number: (323) 467-7124
                    billing_email: support@getfeewise.com
                    billing_number: (323) 467-7124
                    status: Active
                  address:
                    address1: 5969 Melrose Ave,
                    city: Los Angeles
                    state_code: CA
                    postal_code: '90038'
                    country_code: US
                  accounts:
                  - account_id: b6fb6bd2-1ae1-4784-896f-1d00a9457c44
                    account_type: Office
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000123456789'
                    address: 123 Main St
                    alias: Office Account
                    bank: Rapid Bank of Australia
                    is_default: true
        '404':
          description: Channel Partner Not Found
        '500':
          description: Internal Server Error


  /api/v3/partner/firms/{firm_id}/magic-link:
    post:
      tags:
        - Firm
      parameters:
        - in: path
          name: firm_id
          required: true
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        - in: query
          name: destination_url
          required: false
          schema:
            type: string
      summary: Create a magic link
      description: |
        Create a magic link that, on click, redirects to a defined URL within the dashboard. Defaults to homepage
      operationId: getMagicLink
      responses:
        '200':
          description: Magic sign in link for a firm
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                  expires:
                    type: string
                    format: date-time
        '500':
          description: Server Error
        '401':
          description: Access to Firm Unauthorized
        '404':
          description: Firm not found

  /api/v3/partner/firms/{firm_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Get a firm
      description: Deprecated, prefer /api/v3/partner/firms/firm-details.
      operationId: getFirm
      tags:
        - Firm
      responses:
        '200':
          description: Return the Firm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmResponse'
              example:
                firm:
                  firm_id: 128ff5da-b1fe-45f1-a2bd-29176cf0828c
                  trading_name: My Lawyers
                  status: Synced
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/firm-details:
    parameters:
        - name: firm_id
          in: query
          description: Firm ID (UUID)
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        - name: external_id
          in: query
          description: External ID (string)
          schema:
            type: string
    get:
      summary: Get firm details
      description: |
           Get firm details by Firm ID (UUID) - This is the FeeWise unique ID for a firm OR
           by External ID (string), the partner's own unique id for a firm. Both will return the same model
           Firm surcharge settings is defined here. Surcharge price rates can be found as customer variable fee and customer fixed fee per product here: '/api/v3/partner/firms/{firm_id}/pricing'. 
      operationId: getFirmDetails
      tags:
      
        - Firm
      responses:
        '200':
          description: Return the Firm.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmDetails'
              example:
                company:
                    firm_id: 6901804a-66eb-4ec9-b01d-931bd2cc6940
                    external_id: firm_123"
                    legal_name: My Firm LLC
                    legal_identifier: '0654047864'
                    legal_structure: PrivateCorporation
                    trading_name: My Firm
                    tax_id: '12-3456789'
                    website: https://rapidpaylegal.com.au/
                    support_email: support@getfeewise.com
                    support_number: (323) 467-7124
                    contact_email: support@getfeewise.com
                    contact_number: (323) 467-7124
                    billing_email: support@getfeewise.com
                    billing_number: (323) 467-7124
                    status: Active
                address:
                    address1: 5969 Melrose Ave,
                    city: Los Angeles
                    state_code: CA
                    postal_code: '90038'
                    country_code: US
                accounts:
                  - account_id: b6fb6bd2-1ae1-4784-896f-1d00a9457c44
                    account_type: Office
                    country_code: AU
                    account_name: John Smith
                    account_holder_type: Company
                    branch_code: '110000000'
                    account_number: '000123456789'
                    address: 123 Main St
                    alias: Office Account
                    bank: Rapid Bank of Australia
                    is_default: true
                terms_of_service:
                  document_name: FeeWise Terms of Service
                  accepted: '2023-09-18T14:30:00Z'
                  accepted_ip: 192.168.1.100
                roles:
                  - address:
                      address1: 476 W Los Angeles Ave
                      address2: ''
                      city: Moorpark
                      state_code: California
                      postal_code: '93021'
                      country_code: US
                    date_of_birth: '1969-03-12'
                    first_name: testfirstname
                    last_name: testlastname
                    email: kimia.asarroodi+56@rapidpaylegal.com
                    is_executive: true
                    is_representative: true
                    national_id: '123456789'
                    ownership_percentage: '80'
                    phone: '(201) 555-0123'
                    ssn_last_4: '9595'
                    title: Director
                surcharge_settings:
                  surcharged_artifacts:
                    ['PaymentLink','Charge','ChargePaymentPlan','ChargeCardSafe','Invoice','Matter','TrustDeposit','Debtor']
                  surcharge_trust_payments: true
                  status: Enabled
                  start_date: '2023-09-18T14:30:00Z'

        '400':
          description: Bad request
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/surcharging/status/{status}:
    parameters:
      - name: firm_id
        in: path
        description: Firm ID (UUID)
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        required: true
      - name: status
        in: path
        description: |
          enable: The firm would like to enable surcharging
          disable: The firm would like to disable surcharging
          ### Region specific rules
          US environment, there is a 30 day waiting period, for surcharging to be enabled
          AU environment, surcharging is enabled immediately.
          * nb: Once surcharging has been enabled a FirmSurchargeStatusChanged webhook will be triggered
        schema:
          type: string
          enum: [enable, disable]
        required: true

    put:
      summary: Toggle surcharging status
      description: |
        Allows partners to toggle surcharging on or off for a firm.
        Surcharge pricing values can be found using the endpoint, firms/{firm_id}/pricing
      operationId: putSurchargingStatus
      tags:
        - Firm
      responses:
        '200':
          description: Toggle success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurchargeSettingsResponse'
              example:
                surcharge_settings:
                  surcharged_artifacts:
                    ['PaymentLink','Charge','ChargePaymentPlan','ChargeCardSafe','Invoice','Matter','TrustDeposit','Debtor']
                  surcharge_trust_payments: true
                  status: Enabled
                  start_date: '2023-09-18T14:30:00Z'

        '400':
          description: Bad request
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Current surcharging state does not allow disable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/sync/{connect_id}:
    parameters:
      - in: path
        name: connect_id
        required: true
        schema:
          type: string
    post:
      summary: Sync a firm by the FeeWise Connect ID
      description: Given a FeeWise Connect ID return a the firm's ID and status.  The firm ID can be used for future requests.
      operationId: syncFirm
      tags:
        - Firm
      responses:
        '200':
          description: Return the Firm ID and status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FirmResponse'
              example:
                firm:
                  firm_id: 128ff5da-b1fe-45f1-a2bd-29176cf0828c
                  trading_name: My Lawyers
                  status: Synced
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/accounts:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    get:
      summary: List bank accounts
      description: Return all bank accounts linked to a firm.  If no accounts are linked an empty array is returned.
      operationId: getFirmBankAccounts
      tags:
        - Firm
        - Bank Account

      responses:
        '200':
          description: Return the list of bank accounts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountsResponse'
              example:
                office_accounts:
                  - account_id: 9ba5022f-9a5c-4dcb-bfe4-655764837543
                    account_name: Main Business
                    account_type: Office
                    account_number: '1234567'
                    branch_code: '999999'
                    country_code: US
                    account_holder_type: Company
                    is_default: true
                  - account_id: ac71b83e-d629-4d8e-a624-0bab270a0f42
                    account_name: Operations
                    account_type: Office
                    account_number: '5556677'
                    branch_code: '999999'
                    country_code: US
                    account_holder_type: Company
                    is_default: false
                trust_accounts:
                  - account_id: d98dfe65-def3-481c-bb5c-b460f6f924e3
                    account_name: Trust Account
                    account_type: Trust
                    account_number: '222233344'
                    branch_code: '999999'
                    country_code: US
                    account_holder_type: Company
                    is_default: true
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a bank account
      description: |
        Create an Office or Trust account for a Firm.

        If the account doesn't already exit, the new account will be created in `Pending` state. You need to listen for the `firm.bank-account.updated` webhook to know when the account is `Valid` or `Invalid`.
        New account validation is subject to [Stripe's validation rules](https://docs.stripe.com/connect/payouts-bank-accounts?bank-account-collection-integration=direct-api&bank-account-collection-method=manual-entry&account-country=US#collecting-external-accounts), which vary by region. Please refer to these rules if the `firm.bank-account.updated` webhook says your account is `Invalid`.
      operationId: createFirmBankAccount
      tags:
        - Firm
        - Bank Account

      requestBody:
        description: New account details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BankAccount'
            example:
              account_type: Office
              country_code: US
              account_name: Ted Healy
              account_holder_type: Company
              branch_code: 123-123
              account_number: '123456789'
              address: 123 Future St, New New York
              alias: Stooges Office Account
              bank: Rapid Bank of America
      responses:
        '201':
          description: Account created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
              example:
                account_id: b6fb6bd2-1ae1-4784-896f-1d00a9457c44
                account_type: Office
                country_code: US
                account_name: Ted Healy
                account_holder_type: Company
                branch_code: 123-123
                account_number: '12345678'
                address: 123 Future St, New New York
                alias: Stooges Office Account
                bank: Rapid Bank of America
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '409':
          description: Firm bank account already exists
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v3/partner/firms/{firm_id}/accounts/{account_id}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: account_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    get:
      summary: Get a bank account by ID
      description: Get a bank account by ID.
      operationId: getFirmBankAccountByID
      tags:
        - Firm
        - Bank Account
      responses:
        '200':
          description: Return bank account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccount'
              example:
                  account_id: 9ba5022f-9a5c-4dcb-bfe4-655764837543
                  account_name: Main Business
                  account_type: Office
                  account_number: '1234567'
                  branch_code: '999999'
                  country_code: US
                  alias: Office account
                  account_holder_type: Company
                  bank: Rapid Bank
                  is_default: true
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
          summary: Delete a bank account
          description: |
              Delete a bank account for a Firm
              nb: If a bank account is related to an inflight transaction, payout or similar
              the bank account deletion will fail. Contact FeeWise support to resolve the issue.
          operationId: deleteFirmBankAccount
          tags:
            - Firm
            - Bank Account
          responses:
            '204':
              description: Account deleted
            '400':
              description: Bad request
              content:
                application/json:
                  schema:
                    $ref: "#/components/schemas/ErrorResponse"
            '404':
              description: Firm or account not found
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            '409':
              description: Account has ongoing artifacts, transactions, etc.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'
            '500':
              description: Error processing
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/artifacts/settlement-account/{settlement_account_id}/replace:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: settlement_account_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      summary: Update the settlement account for unpaid artifacts.
      description: Swaps the settlement account id on all artifacts with the given artifact type.
      tags:
        - Payments
      operationId: updateArtifactAccount
      requestBody:
        description: Contains the type of the artifact and the ID of the account the artifacts should be paid to.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                new_account_id:
                  description: The new settlement account ID
                  type: string
                  format: uuid
                  x-go-type: uuid.UUID
                  x-go-type-import:
                    path: github.com/gofrs/uuid
                    name: uuid
                artifact_type:
                  $ref: '#/components/schemas/ArtifactType'
              required:
                - new_account_id
                - artifact_type
      responses:
        '200':
          description: Successfully updated the artifacts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdatedCount'
        '400':
          description: Bad request
        '404':
          description: Firm not found
        '500':
          description: Error processing


  /api/v3/partner/firms/{firm_id}/accounts/{account_id}/default:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: account_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      summary: Set firms default bank account.
      description: Set the given account as the default bank account (Trust or Office). The account type will determine if the bank account
        becomes the default office or trust account.
      operationId: setFirmsDefaultBankAccount
      tags:
        - Firm
        - Bank Account
      responses:
        '200':
          description: The default bank account was successfully set.  The bank account object is returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BankAccountResponse'
              example:
                bank_account:
                  account_id: 9ba5022f-9a5c-4dcb-bfe4-655764837543
                  account_name: Main Business
                  account_type: Office
                  account_number: '1234567'
                  branch_code: '999999'
                  country_code: US
                  account_holder_type: Company
                  is_default: true
        '404':
          description: Bank Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/branding:

    get:
      operationId: getPartnerBranding
      summary: Get partner branding
      description: Get partner branding. Nb if branding is not set, an empty model will be returned
      tags:
        - Partner
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                properties:
                  branding:
                    $ref: "#/components/schemas/PartyBranding"
              example:
                branding:
                  colour: "#rrggbb"
                  icon: http://somehost/firm/branding/58919984-29d4-4d6a-8469-84a97eb298df-icon-b5073bc0-3ea9-44bb-bbf3-d875549cd8fb.jpg
                  logo: http://somehost/firm/branding/58919984-29d4-4d6a-8469-84a97eb298df-logo-88425486-205a-4610-ab26-ab2a14cf5d14.png
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        '500':
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v3/partner/firms/{firm_id}/branding:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    get:
      operationId: getFirmBranding
      summary: Get firm branding
      description: Get firm branding. Nb if branding is not set, an empty model will be returned. nb To avoid overwriting the Firms existing brand settings by mistake, this GET endpoint should be used to retrieve the firms current branding PRIOR to using the POST endpoint.
      tags:
        - Firm
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                properties:
                  branding:
                    $ref: "#/components/schemas/PartyBranding"
              example:
                branding:
                  colour: "#rrggbb"
                  icon: http://somehost/firm/branding/58919984-29d4-4d6a-8469-84a97eb298df-icon-b5073bc0-3ea9-44bb-bbf3-d875549cd8fb.jpg
                  logo: http://somehost/firm/branding/58919984-29d4-4d6a-8469-84a97eb298df-logo-88425486-205a-4610-ab26-ab2a14cf5d14.png
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        '500':
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v3/partner/firms/{firm_id}/branding/colour:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      operationId: postFirmBrandingColour
      description: Update firm branding colour
      summary: Set firm branding colour for firm dashboard
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                colour:
                  type: string
                  pattern: '^#([a-fA-F0-9]{6})$'
                  description: |
                    RGB hex colour code. Alpha channel not supported
                    The branding will be used in the FeeWise firm dashboard
              required:
                - colour
            example:
              colour: "#ffffff"

      tags:
        - Firm
      responses:
        '204':
          description: Successful Response

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        '500':
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


  /api/v3/partner/firms/{firm_id}/upload:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: query
        name: person_id
        required: false
        description: |
          person_id is required when the file_purpose is "identity_document".
          The person_id can be retrieved from the firm details endpoint.
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - name: file_purpose
        in: query
        description: Purpose of the uploaded file, must match one of the enum values
        required: true
        schema:
          type: string
          description: |
            file_purpose describes the purpose of a file being uploaded to FeeWise
            e.g. An identity document, a tax document required during firm onboarding
                 or, the logo of a firm
            supported file types are: 
              business_logo .png, .jpg, .jpeg, 
              identity_document .pdf, .png, .jpg, .jpeg,
          enum:
            - business_logo
            - business_icon
            - identity_document
            - tax_document_user_upload
      - name: document_side
        in: query
        description: The side of the "identity_document" being uploaded.
        required: false
        schema:
          type: string
          description: |
            document_side specifies the side of an identity document being uploaded to FeeWise. 
            If no side is explicitly provided, it will default to the front side.
            Certain identity documents may require the submission of both their front and back sides for verification.
          enum:
            - front
            - back
          default: front
    post:
      operationId: postUpload
      summary: Upload file
      description: |
        Upload files to FeeWise.
        nb Content-Type header must be multipart/form-data
        example 
        curl -X POST -F "fwUploadFile=@/path/to/file.png" \
            http://localhost:8080/api/v3/partner/firms/<firm_id>/upload?file_purpose=identity_document \
              --header 'X-CHANNEL-PARTNER-ID: <channel partner id>'  \
              --header 'X-API-KEY: <api key>' \
              --header "Content-Type: multipart/form-data"
      requestBody:
        description: File to be uploaded to FeeWise
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fwUploadFile:
                  type: string
                  format: binary
      tags:
        - Firm
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                    format: uri
                    description: |
                      URL of the uploaded file. For security reasons the URL will be only provided for logo and icon files.
                  uploaded_file_name:
                    type: string
                    description: Name of the uploaded file.
                  uploaded_file_size_in_bytes:
                    type: integer
                    description: Size of the uploaded file, in bytes.

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: Forbidden request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

        '500':
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v3/partner/upload:
    post:
      operationId: postPartnerLogoUpload
      tags:
        - Partner
      summary: Upload partner logo
      description: |
        Upload a partner logo to FeeWise. This logo will be used wherever FeeWise and the partner have agreed to show a logo in the FeeWise UI.
        nb Content-Type header must be multipart/form-data
        example 
        curl -X POST -F "fwUploadFile=@/path/to/file.png" \
            http://localhost:8080/api/v3/partner/upload \
              --header 'X-CHANNEL-PARTNER-ID: <channel partner id>' \
              --header 'X-API-KEY: <api key>' \
              --header "Content-Type: multipart/form-data"
      requestBody:
        description: Logo to be uploaded to FeeWise
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fwUploadFile:
                  type: string
                  format: binary
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                properties:
                  url:
                    type: string
                    format: uri
                    description: URL of the uploaded file, in FeeWise.
                  uploaded_file_name:
                    type: string
                    description: Name of the uploaded file.
                  uploaded_file_size_in_bytes:
                    type: integer
                    description: Size of the uploaded file, in bytes.

        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v3/partner/branding/colour:
    post:
      operationId: postPartnerBrandingColour
      tags:
        - Partner
      summary: Set partner colour
      description: Sets a partner colour. This colour will be used as default colour in FeeWise dashboard and can be overwritten by firm's branding colour.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                colour:
                  type: string
                  pattern: '^#([a-fA-F0-9]{6})$'
                  description: |
                    RGB hex colour code. Alpha channel not supported
                    The branding colour will be used in the FeeWise dashboard as firm's default colour
              required:
                - colour
            example:
              colour: "#ffffff"
      responses:
        '204':
          description: Successful Response
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '401':
          description: Unauthorized request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '500':
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v3/partner/rotatekey:
    post:
      description: |
        Produces a new API-KEY. This new key and the previous key will both be valid until they expire.
        The key expiry is set by system defaults but may be customised for this specific key in the request.
      operationId: rotateApiKey
      summary: Rotate API Key
      tags:
        - API Key
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiKeyRotation'
      responses:
        '200':
          description: New api key
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/webhook/receiver:
    post:
      summary: Dummy receiver for webhooks.
      description: This is a webhook receiver. Normally implemented by channel partners to receive webhooks
      operationId: receiveWebhook
      tags:
        - Webhook
      requestBody:
        description: Webhook event.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebhookEvent'
      responses:
        '200':
          description: The webhook was received

  /api/v3/partner/payments/external:
    post:
      summary: Record external payment.
      description: |
        If a payment is made towards an artifact (invoice, trust deposit) outside of FeeWise, it should be recorded using this endpoint.
        This will be recorded as a payment against the artifact and change the amount_due.
      operationId: recordExternalPayment
      tags:
        - Payments
      requestBody:
        description: External payment details.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalPayment'
            example:
              artifact_id: '4c662be8-0557-406c-ae14-d98118b81f27'
              amount: '100'
              payment_type: 'Card'
              external_id: '123'
              details: 'external payment'
      responses:
        '200':
          description: The payment was recorded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalPaymentResponse'
        '404':
          description: Artifact not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: External payment already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/matters:
    post:
      description: |
        Create a matter, with all matter information, debtor details and artifacts, invoice or trust deposit.
      summary: Create a matter
      operationId: createMatter
      tags:
        - Payments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatterRequest'
            example:
              firm_id: facade00-0000-4000-a000-000000000000
              matter:
                external_id: my-unique-external-id
                external_reference: my-external-reference
                description: 'The matter of Frank vs Herman '
                type: court
              debtor:
                external_id: case-client-1234
                name: Frank
                email: frank@email.com
                contact_number: "1300234567"
              artifacts:
                - external_id: e69f9433-885b-4321-bb48-9f5084850893
                  artifact_type: Invoice
                  amount: "100.00"
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: "1953-07-23T13:56:24.084Z"
                  surcharge_choice_override: Customer
                  description: Charge for case setup
                  line_items:
                    - amount: "50"
                      name: Phone call
                      description: Listened to voice message
                      quantity: 1
                      tax_rate: "10"
                    - amount: "50"
                      name: Phone call
                      description: Replied to voice mail
                      quantity: 1
                      tax_rate: "15"
                  notes:
                    - Got to know client
                    - Created initial case file
                  payment_methods_override:
                    - Card
                - external_id: 46b3eed1-b469-46f3-ab93-2bb6921b8592
                  artifact_type: Invoice
                  amount: "150.00"
                  settlement_account_type: Office
                  external_reference: inv-123
                  currency: AUD
                  due_date: "1953-07-23T13:56:24.084Z"
                  surcharge_choice_override: Customer
                  description: Legal service
                  line_items:
                    - amount: "100"
                      name: Phone call
                      description: Listened to voice message
                      quantity: 1
                      tax_rate: "10"
                  notes:
                    - Got to know client
                    - Created initial case file
                  payment_methods_override:
                    - Card
      responses:
        '200':
          description: Matter was created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatterResponse'
        '409':
          description: Invalid settlement account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: settlement account is invalid.
                title: Conflict
                type: invalid_settlement_account
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/statements/matters/{matter_id}:
    get:
      deprecated: true
      parameters:
        - in: path
          name: matter_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          required: true
        - in: query
          name: to
          required: false
          schema:
            type: integer
        - in: query
          name: from
          required: false
          schema:
            type: integer
      description: |
        Get a matter statement that is payable by the client via the returned URL. 

        Note: `to` and `from` are not yet implemented.
      summary: Get a matter statement
      operationId: getMatterStatement
      tags:
        - Payments
      responses:
        '200':
          description: Matter Statement was returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatterStatement'
        '400':
          description: Incompatible filters provided. Must provide at least a matter_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/statements/debtors/{debtor_id}/matters/{matter_id}:
    get:
      parameters:
        - in: path
          name: debtor_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          required: true
        - in: path
          name: matter_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          required: true
        - in: query
          name: to
          required: false
          schema:
            type: integer
        - in: query
          name: from
          required: false
          schema:
            type: integer
      summary: Get a matter debtor statement
      description: |
        Get a matter statement that is payable by the client via the returned URL. 

        Note: `to` and `from` are not yet implemented.
      operationId: getDebtorMatterStatement
      tags:
        - Payments
      responses:
        '200':
          description: Matter Statement was returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MatterStatement'
        '400':
          description: Incompatible filters provided. Must provide at least a matter_id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/statements/debtors/{debtor_id}:
    get:
      parameters:
        - in: path
          name: debtor_id
          schema:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
          required: true
      summary: Get a debtor statement
      description: |
        Get a debtor statement that is payable by the client via the returned URL.
      operationId: getDebtorStatement
      tags:
        - Payments
      responses:
        '200':
          description: Debtor Statement was returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DebtorStatement'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Debtor not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/charges:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: Create a Charge
      description: |
        Create a charge for a firm. The firm can then send the returned URI to their customer, for payment.
        NB the fields `charge_id`, and `payment_uri` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the charge has been created and will be available in the response.
      operationId: createCharge
      tags:
        - Payments
      requestBody:
        description: Charge details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
            example:
              amount: "123.45"
              settlement_account_type: Office
              description: Charge for case setup
              debtor:
                external_id: case-client-1234
                first_name: Frank
                last_name: Smith
                email: frank@email.com
                contact_number: "1300234567"
              notes:
                - Got to know client
                - Created initial case file
              payment_methods_override:
                - Card
                - DirectDebit
              store_payment_methods:
                - Card
              metadata:
                key1: value
                key2: value2
      responses:
        '200':
          description: Created Charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeResponse'
              example:
                charge:
                  charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  amount: "123.45"
                  settlement_account_type: Office
                  description: Charge for case setup
                  debtor:
                    external_id: case-client-1234
                    first_name: Frank
                    last_name: Smith
                    email: frank@email.com
                    contact_number: "1300234567"
                  notes:
                    - Got to know client
                    - Created initial case file
                  payment_methods_override:
                    - Card
                    - DirectDebit
                  store_payment_methods:
                    - Card
                  payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
        '400':
          description: Bad request, do not include charge_id or payment_uri in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Firm or Settlement Account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Invalid settlement account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: settlement account is invalid.
                title: Conflict
                type: invalid_settlement_account
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/charges/split:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: Create split charges, each charge is distributed to its own settlement account.
      description: |
        Create multiple charges for a firm, that can be paid in a single payment.
        NB the fields `charge_id`, and `payment_uri` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the split charge has been created and will be available in the response.
      operationId: createSplitCharge
      tags:
        - Payments
      requestBody:
        description: Split Charge details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SplitCharge'
            example:
              description: Charge for case setup
              metadata:
                splitChargesKey1: value1
                splitChargesKey2: value2
              debtor:
                external_id: case-client-1234
                first_name: Frank
                last_name: Smith
                email: frank@email.com
                contact_number: "1300234567"
              charges:
                - amount: "1000.00"
                  settlement_account_type: Office
                  description: Charge for case 1
                - amount: "2000.00"
                  settlement_account_type: Trust
                  description: Charge for case 2
      responses:
        '200':
          description: Created Split Charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SplitChargesResponse'
              example:
                splitCharge:
                  payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
                  description: Charge for case setup
                  split_charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  amount: "3000.00"
                  metadata:
                    splitChargesKey1: value1
                    splitChargesKey2: value2
                  debtor:
                    external_id: case-client-1234
                    first_name: Frank
                    last_name: Smith
                    email: frank@email.com
                    contact_number: "1300234567"
                  charges:
                    - amount: "1000.00"
                      settlement_account_type: Office
                      description: Charge for case 1
                    - amount: "2000.00"
                      settlement_account_type: Trust
                      description: Charge for case 2

        '400':
          description: Bad request, do not include split_charge_id or payment_uri in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Firm or Settlement Account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Invalid settlement account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: settlement account is invalid.
                title: Conflict
                type: invalid_settlement_account
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/charges/payment_token/{payment_token}:
    parameters:
      - in: path
        name: payment_token
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: DEPRECATED - Use /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token} endpoint instead
      description: |
        Create a charge (and pay for it) for a firm, using an existing customer payment token. 
        A list of customer payment tokens can be retrieved from the `/customers` endpoint.
        
        NB the fields `charge_id`, and `payment_uri` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the charge has been created and will be available in the response.
      operationId: createChargeAndPayWithCustomerPaymentToken
      deprecated: true
      tags:
        - Payments
      requestBody:
        description: Charge details, using an existing customer payment token
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Charge'
            example:
              amount: "543.21"
              settlement_account_type: Office
              description: Charge for case setup
              debtor:
                external_id: case-client-charge-4321
                first_name: John
                last_name: Smith
                email: john@email.com
                contact_number: "1300234567"
              notes:
                - Got to know client
                - Created initial case file
              metadata:
                my-key: value
                my-key2: value2
      responses:
        '200':
          description: Charge created and paid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargeAndPayResponse'
              example:
                charge:
                  charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  amount: "123.45"
                  settlement_account_type: Office
                  description: Charge for case setup
                  debtor:
                    external_id: case-client-1234
                    first_name: Frank
                    last_name: Smith
                    email: frank@email.com
                    contact_number: "1300234567"
                  notes:
                    - Got to know client
                    - Created initial case file
                  payment_methods_override:
                    - Card
                    - DirectDebit
                  store_payment_methods:
                    - Card
                payment_id: 74a30957-4f49-42f5-b037-9145fc2fbb19
        '400':
          description: Bad request, do not include charge_id or payment_uri in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Firm or Settlement Account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Charge was unsuccessful and the payment failed to process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: Your card was declined.
                title: Conflict
                type: card_error
                error_context:
                  code: card_declined
                  decline_code: generic_decline
        '500':
          description: Error processing charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}:
    parameters:
      - in: path
        name: payment_token
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: Create Charge, and pay directly.
      description: |
        Create a charge (and pay for it) for a firm, using an existing customer payment token. 
        A list of customer payment tokens can be retrieved from the `/customers` endpoint.
        
        NB the fields `charge_id`, and `payment_uri` must NOT be supplied. If supplied, BadResponse will be returned.  
        These are populated once the charge has been created and will be available in the response.
      operationId: createChargePayment
      tags:
        - Payments
      requestBody:
        description: Charge details, using an existing customer payment token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                charge:
                  $ref: '#/components/schemas/Charge'
                review_payment:
                  description: When set to true, the endpoint will always return a '402 - Payment requires a review' error response,
                    this can be used to enforce a 2-step payment. When set to false or not present, the '402' will only be returned
                    if there is a surcharge greater than $0 for the payment.
                  type: boolean
                session_id:
                  type: string
                  format: uuid
                  x-go-type: uuid.UUID
                  x-go-type-import:
                    path: github.com/gofrs/uuid
                    name: uuid
              required:
              - charge
            example:
              charge:
                amount: "543.21"
                settlement_account_type: Office
                description: Charge for case setup
                debtor:
                  external_id: case-client-charge-4321
                  first_name: John
                  last_name: Smith
                  email: john@email.com
                  contact_number: "1300234567"
                notes:
                  - Got to know client
                  - Created initial case file
                metadata:
                  my-key: value
                  my-key2: value2
              review_payment: true
              session_id: d3416309-39f9-4adb-9217-c770cf680150
      responses:
        '200':
          description: Charge created and paid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChargePaymentDetails'
              example:
                charge:
                  charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  amount: "123.45"
                  settlement_account_id: 8a585dfb-c6a9-48f7-b8c0-93ce2b2a30b1
                  description: Charge for case setup
                  debtor:
                    external_id: case-client-1234
                    first_name: Frank
                    last_name: Smith
                    email: frank@email.com
                    contact_number: "1300234567"
                  notes:
                    - Got to know client
                    - Created initial case file
                payment_details:
                  artifact_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  payment_id: 398b17b7-819d-4110-abf3-8673bc539d4e
                  session_id: 60221a36-7bef-4d5e-a70d-73ce11003ea5
                  amount: "124.68"
                  subtotal: "123.45"
                  customer_fee_amount: "1.23"
                  payer_details:
                    name: "Kier Eagan"
                    address: "1 Pitt St Sydney New South Wales 2000"
                    email: "m@m.com"
                  payment_method: Card
                  card_details:
                    scheme: "VISA"
                    scheme_partial_number: "5509"
                    funding_type: "Credit"
                  date: "2022-07-29T01:26:04.729Z"
        '400':
          description: Bad request, do not include charge_id or payment_uri in the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '402':
          description: Payment requires a review
          content:
            application/json:
              schema:
                properties:
                  title:
                    type: string
                  detail:
                    type: string
                  type:
                    type: string
                  payment_review:
                    $ref: '#/components/schemas/ChargePaymentDetails'
              example:
                title: "Payment Required"
                type: "payment_review_required"
                detail: "payment review required"
                payment_review:
                  charge:
                    charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                    firm_id: facade00-0000-4000-a000-000000000000
                    amount: "123.45"
                    settlement_account_id: 8a585dfb-c6a9-48f7-b8c0-93ce2b2a30b1
                    description: Charge for case setup
                    debtor:
                      external_id: case-client-1234
                      first_name: Frank
                      last_name: Smith
                      email: frank@email.com
                      contact_number: "1300234567"
                    notes:
                      - Got to know client
                      - Created initial case file
                  payment_details:
                    artifact_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                    payment_id: 398b17b7-819d-4110-abf3-8673bc539d4e
                    session_id: 60221a36-7bef-4d5e-a70d-73ce11003ea5
                    amount: "124.68"
                    subtotal: "123.45"
                    customer_fee_amount: "1.23"
                    customer_fee_pricing: "1%"
                    payer_details:
                      name: "Kier Eagan"
                      address: "1 Pitt St Sydney New South Wales 2000"
                      email: "m@m.com"
                    payment_method: Card
                    card_details:
                      scheme: "VISA"
                      scheme_partial_number: "5509"
                      funding_type: "Credit"
                    date: "2022-07-29T01:26:04.729Z"
        '404':
          description: Firm or Settlement Account could not be found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Charge was unsuccessful and the payment failed to process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: Your card was declined.
                title: Conflict
                type: card_error
                error_context:
                  code: card_declined
                  decline_code: generic_decline
        '500':
          description: Error processing charge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'                

  /api/v3/partner/firms/{firm_id}/customers:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: List all the customers for a firm.
      description: Return an array of all customers with their saved payment methods. If no customers, an empty array is returned.
      operationId: getFirmCustomers
      tags:
        - Firm
      responses:
        '200':
          description: Return the list of customers.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomersResponse'
              example:
                customers:
                  - debtor:
                      debtor_id: e9f17c2b-8dac-49f4-b022-739e62e0ab47
                      external_id: case-client-1234
                      first_name: Frank
                      last_name: Smith
                      email: frank@email.com
                      contact_number: '1300234567'
                    payment_methods:
                      - payment_method_id: f8fb61a7-5589-4bf7-b7df-3b53e67d7195
                        scheme: visa
                        scheme_partial_number: '1234'
                        funding_type: credit
                        country: US
                        expiration_date: '2025-07-27T04:02:26.662446Z'
                      - payment_method_id: 07c068ed-acb0-4335-9eef-dea2fbcb9ff3
                        scheme: amex
                        scheme_partial_number: '2345'
                        funding_type: credit
                        country: US
                        expiration_date: '2025-08-25T04:02:26.662446Z'
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/payment_token:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    post:
      summary: Create a payment token for a customer.
      description: Create a payment token for a customer to capture their payment method details and later use to charge them via the charge and pay endpoint /api/v4/partner/firms/{firm_id}/charges/payment-token/{payment_token}.
      operationId: createPaymentToken
      tags:
        - Firm
      requestBody:
        description: |
          Customer and payment method details
          nb If payment method is not provided, the default will be set to Card.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentTokenBody'
            example:
              debtor:
                external_id: eb83fb91-1a42-478f-adde-b0b790c99b5e
                first_name: John
                last_name: Smith
                email: john@email.com
                contact_number: '1300234567'
              token_type: SingleUse
              payment_methods: [
                'Card',
                'DirectDebit'
              ]

      responses:
        '200':
          description: Return the customer and payment token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentTokenResponse'
              example:
                debtor:
                  debtor_id: e9f17c2b-8dac-49f4-b022-739e62e0ab47
                  external_id: eb83fb91-1a42-478f-adde-b0b790c99b5e
                  first_name: John
                  last_name: Smith
                  email: john@email.com
                  contact_number: '1300234567'
                payment_token: f8fb61a7-5589-4bf7-b7df-3b53e67d7195
                capture_uri: http://localhost:8080/capture/f8fb61a7-5589-4bf7-b7df-3b53e67d7195
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/payment_token/{payment_token}:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: payment_token
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    delete:
      summary: Delete a payment token
      description: Delete a payment token for given firm
      operationId: deletePaymentToken
      tags:
        - Firm
      responses:
        '204':
          description: Payment token has been successfully deleted.
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '404':
          description: Firm or token not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Payment token in use.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: payment token is being used by payment plans.
                title: Conflict
                type: payment_token_in_use
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/charges/search:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: Query metadata to search for Charges, for the given firm
      description: Retrieve a firm's charges that are associated with a specific metadata key-value pair
      operationId: searchChargesByMetadata
      tags:
        - Firm
      requestBody:
        description: Metadata search details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataSearch'
            example:
              key: external_id
              value: 83aac8f5-f5da-4779-b852-bdafa1575e09
      responses:
        '200':
          description: Return the objects that match the metadata key value pairs.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChargeResponse'
              example:
                - charge:
                    charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                    firm_id: facade00-0000-4000-a000-000000000000
                    amount: '123.45'
                    settlement_account_type: Office
                    description: Charge for case setup
                    debtor:
                      external_id: case-client-1234
                      first_name: Frank
                      last_name: Smith
                      email: frank@email.com
                      contact_number: "1300234567"
                    notes:
                      - Got to know client
                      - Created initial case file
                    payment_methods_override:
                      - Card
                      - DirectDebit
                    store_payment_methods:
                      - Card
                    payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
                    metadata:
                      external_id: 83aac8f5-f5da-4779-b852-bdafa1575e09
                - charge:
                    charge_id: 86a195f4-e8f4-415c-90dd-95bfba686976
                    firm_id: facade00-0000-4000-a000-000000000000
                    amount: '2345.67'
                    settlement_account_type: Office
                    description: Charge for case setup
                    debtor:
                      external_id: case-client-1234
                      first_name: Frank
                      last_name: Smith
                      email: frank@email.com
                      contact_number: "1300234567"
                    notes:
                      - Got to know client
                      - Created initial case file
                    payment_methods_override:
                      - Card
                      - DirectDebit
                    store_payment_methods:
                      - Card
                    payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
                    metadata:
                      external_id: 83aac8f5-f5da-4779-b852-bdafa1575e09
        "500":
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v3/partner/firms/{firm_id}/pricing:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
    get:
      summary: List the pricing products for a firm and their constraints.
      description: Returns an array of pricing products for a specific firm. Surcharge price rates are customer variable fee and customer fixed fee. 
      operationId: getFirmPricing
      tags:
        - Firm
      parameters:
        - in: query
          name: amount
          description: |
            An example amount.

            When supplied, each payment method in the response will contain an `example_amount`, representing the full amount that would be charged including fees, given the amount passed in.
          schema:
            type: string
            format: decimal
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
              example:
                products:
                  - brands:
                      - ach
                    customer_fixed_fee: "0.2"
                    customer_variable_fee: "2.9"
                    payment_method: DirectDebit
                    upper_bound: '100000.00'
                    lower_bound: '1.00'
                    type: ACH
                    example_price:
                      amount: "100.00"
                      total: "103.10"
                  - brands:
                      - amex
                      - diners
                      - jcb
                    customer_fixed_fee: "0.2"
                    customer_variable_fee: "2.9"
                    payment_method: Card
                    upper_bound: '120000.00'
                    lower_bound: '1.00'
                    type: CardPremiumCredit
                    example_price:
                      amount: "100.00"
                      total: "103.10"
                  - brands:
                      - unionpay
                    customer_fixed_fee: "0.2"
                    customer_variable_fee: "2.9"
                    payment_method: Card
                    upper_bound: '100000.00'
                    lower_bound: '1.00'
                    type: CardSpecialtyCredit
                    example_price:
                      amount: "100.00"
                      total: "103.10"
                  - brands:
                      - discover
                      - visa
                      - mastercard
                    customer_fixed_fee: "0.2"
                    customer_variable_fee: "2.9"
                    payment_method: Card
                    upper_bound: '100000.00'
                    lower_bound: '1.00'
                    type: CardStandardCredit
                    example_price:
                      amount: "100.00"
                      total: "103.10"
        '404':
          description: Firm not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Error processing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /api/v3/partner/firms/{firm_id}/charges/{charge_id}/payments/{payment_id}/confirm:
    parameters:
      - in: path
        name: firm_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: charge_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
      - in: path
        name: payment_id
        required: true
        schema:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    post:
      summary: Confirm a pending charge payment.
      description: confirm the payment of a pending charge using the provided charge_id and payment_id
      tags:
        - Payments
      requestBody:
        description:
          POST Body contains Metadata to apply to the charge. 
          Warning, will replace the charge's existing metadata.
        content:
          application/json:
            schema:
              type: object
              properties:
                metadata:
                  $ref: '#/components/schemas/ChannelPartnerMetadata'
            example:
                metadata:
                    key1: value1
                    key2: value2
      operationId: postConfirmChargePayment
      responses:
        '200':
          description: successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ChargePaymentDetails"
              example:
                charge:
                  charge_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  firm_id: facade00-0000-4000-a000-000000000000
                  amount: "123.45"
                  settlement_account_type: Office
                  description: Cleanup Fees
                  debtor:
                    external_id: case-client-1234
                    first_name: Vincent
                    last_name: Vega
                    email: vincent@email.com
                    contact_number: "1300234567"
                  payment_uri: http://localhost:8080/pay/d3010d67-06d3-46bf-be6a-b894ec743c96
                payment_details:
                  payment_id: 4ff25d55-262d-4ab1-ab83-aeb09159ac9b
                  artifact_id: bf311c82-a0d1-4e31-998b-f00de9250d4a
                  session_id: d3010d67-06d3-46bf-be6a-b894ec743c96
                  amount: "123.45"
                  subtotal: "120.00"
                  date: 2023-10-13T04:23:57.709114Z
                  customer_fee_amount: "3.45"
                  customer_fee_pricing: 2.9% + $0.30
                  payment_method: Card
                  payer_details:
                    name: Vincent Vega
                    email: vince@email.com
                    address: 123 Main St
                  card_details:
                    scheme: visa
                    scheme_partial_number: "4242"
                    funding_type: credit
                    country: US
                    expiration_date: 2025-12-31T00:00:00Z
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        '403':
          description: Firm is unable to transact
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Firm, charge or payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Charge has already been paid or payment is out of sync
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                detail: charge has already been paid
                title: Conflict
                type: charge paid
        '500':
          description: generic server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"


components:
  securitySchemes:
    PartnerAuth:
      type: apiKey
      in: header
      name: X-CHANNEL-PARTNER-ID
    APIAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  schemas:

    Invoice:
      type: object
      description: |
        An Invoice is created to request payment.
        One of settlement_account_type or settlement_account_id must be specified but not both.
      properties:
        invoice_id:
          type: string
          description: |
            This is the uuid of the invoice. This will be used for and 'GET' of the invoice and in webhooks about this invoice
            NB this is generated and must not be supplied when creating an invoice.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering invoices. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering invoices.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the invoice is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this invoice.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        settlement_account_type:
          $ref: "#/components/schemas/AccountType"
        settlement_account_id:
          description: |
            The id of the account the invoice settlement should be paid to. 
            NB, if both the settlement_account_type and settlement_account_id are specified, it is a bad request
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          description: Freeform notes on the invoice
          type: array
          items:
            type: string
        payments:
          description: List of payments made against this invoice
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for API user.
        payment_uri:
          type: string
          description: The URI to get the client payment instructions for this invoice
        status:
          type: string
          description: The status of the invoice
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - firm_id
        - external_id
        - amount

    InvoiceResponse:
      type: object
      properties:
        invoice:
          $ref: '#/components/schemas/Invoice'
      required:
        - invoice

    TrustDeposit:
      type: object
      description: |
        A TrustDeposit is created to request payment into a Trust account
      properties:
        trust_deposit_id:
          type: string
          description: |
            This is the uuid of the Trust Deposit. This will be used for any 'GET' of the Trust Deposit and in webhooks about this Trust Deposit
            NB this is generated and must not be supplied when creating a Trust Deposit.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the trust deposit is raised for.
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering trust deposits. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering trust deposits.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the trust deposit is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this trust deposit.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          type: array
          items:
            type: string
          description: Freeform notes on the trust deposit
        payments:
          description: List of payments made against this trust deposit.
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        settlement_account_id:
          description: |
            The id of the account the trust deposit should be paid to. 
            If not supplied, the default trust deposit for the firm will be used
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for channel partner / PMS.
        payment_uri:
          type: string
          description: |
            The URI to send to customer.   
            They will follow this link to make a payment.   
            NB This must not be set when creating an invoice.
        status:
          type: string
          description: The status of the trust deposit. This must not be set when creating an trust deposit.
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - firm_id
        - external_id
        - amount

    TrustDepositResponse:
      type: object
      properties:
        trust_deposit:
          $ref: '#/components/schemas/TrustDeposit'
      required:
        - trust_deposit


    LineItem:
      type: object
      description: One item of potentially many that are included in a payment.
      properties:
        name:
          type: string
        description:
          type: string
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        quantity:
          type: integer
        tax_rate:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
      required:
        - amount


    Matter:
      type: object
      description: The matter that payments are regarding.
      properties:
        matter_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          type: string
          description: The id of the matter in the PMS.
        external_reference:
          type: string
          description: Freeform reference (normally for the PMS)
        description:
          type: string
          description: A description of the matter
        type:
          type: string
          description: Free form type of the matter.
        suggested_office_replenishment:
          description: Suggested amount to show to a customer during payments, for an Office Replenishment
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        suggested_trust_replenishment:
          description: Suggested amount to show to a customer during payments, for a Trust Replenishment
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
      required:
        - "external_id"




    MatterSummary:
      type: object
      description: Contains summarised matter details and any associated artifacts.
      properties:
        matter_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          type: string
          description: The id of the matter in the PMS.
        external_reference:
          type: string
          description: Freeform reference (normally for the PMS)
        artifacts:
          type: array
          description: List of artifacts associated with the matter, sorted by date asc
          items:
            $ref: '#/components/schemas/Artifact'
      required:
        - "matter_id"
        - "external_id"



    MatterRequest:
      type: object
      description: The matter request object contains all matter information, debtor details and artifacts, invoices or trust deposits, to be created for the matter.
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        matter:
          $ref: '#/components/schemas/Matter'
        debtor:
          $ref: "#/components/schemas/Debtor"
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
      required:
        - firm_id
        - matter
        - artifacts

    MatterResponse:
      type: object
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        matter:
          $ref: '#/components/schemas/Matter'
        debtor:
          $ref: "#/components/schemas/Debtor"
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
      required:
        - firm_id
        - matter
        - artifacts

    Artifact:
      type: object
      description: |
        An Artifact can be an Invoice or a Trust Deposit. An Artifact is created to request payment.
        One of settlement_account_type or settlement_account_id must be specified but not both.
      properties:
        artifact_id:
          type: string
          description: |
            This is the uuid of the artifact. This will be used for and 'GET' of the artifact and in webhooks about this artifact
            NB this is generated and must not be supplied when creating an artifact.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering artifacts. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering artifacts.
          example: inv-123
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount the artifact is for.
        amount_due:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The total amount outstanding on this artifact.
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        settlement_account_type:
          $ref: "#/components/schemas/AccountType"
        settlement_account_id:
          description: |
            The id of the account the artifact settlement should be paid to. 
            NB, if both the settlement_account_type and settlement_account_id are specified, it is a bad request
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
        notes:
          description: Freeform notes on the artifact
          type: array
          items:
            type: string
        payments:
          description: List of payments made against this artifact
          type: array
          items:
            $ref: "#/components/schemas/Payment"
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        description:
          type: string
          description: Freeform text for API user.
        status:
          type: string
          description: The status of the artifact
          enum:
            - Draft
            - Submitted
            - Authorised
            - Voided
      required:
        - external_id
        - amount
        - artifact_type

    ExternalPaymentResponse:
      type: object
      properties:
        artifact_details:
          $ref: '#/components/schemas/Artifact'
      required:
        - artifact_details

    PaymentTokenBody:
      type: object
      properties:
        debtor:
          $ref: '#/components/schemas/Debtor'
        token_type:
          $ref: '#/components/schemas/TokenType'
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
      required:
        - debtor

    TokenType:
      type: string
      description: | 
            A token represents a customer's payment details. 
            Payment Tokens can be used in place of a payment method, for Charge types. 
            If the token type is SingleUse, it can only be used once.
      enum:
        - SingleUse
        - MultiUse
      default: SingleUse

    Debtor:
      type: object
      description: The entity that should be making the payment. This will normally be a client of the firm.
      properties:
        debtor_id:
          description:  This is the uuid of the debtor in FeeWise.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          type: string
          description: ID in the PMS
        name:
          type: string
          deprecated: true
          description: The debtor name (e.g. concatenated first and last name)
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        address:
          type: string
        contact_number:
          type: string
      required:
        - external_id

    Payer:
      type: object
      description: |
        The entity that actually made the payment. 
        Will normally be the debtor, but may be someone that paid on their behalf.
      properties:
        name:
          description: The payer name (i.e. concatenated first and last name)
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        address:
          type: string
        contact_number:
          type: string

    Currency:
      type: string
      description: Currency of a payment. If not specified, the local default is used.
      enum:
        - AUD
        - CAD
        - USD
        - GBP
        - NZD

    AccountType:
      description: The type of the bank account.
      type: string
      enum:
        - Office
        - Trust

    ArtifactType:
      type: string
      enum:
        - Invoice
        - TrustDeposit
        - Matter
        - Debtor
        - OfficeReplenishment
        - TrustReplenishment
        - Charge
        - ChargeCardSafe
        - ChargePaymentPlan
        - PaymentLink

    PaymentMethod:
      type: string
      enum:
        - Card
        - DirectDebit

    SurchargeChoice:
      type: string
      enum:
        - Customer
        - Merchant

    WebhookList:
      type: object
      properties:
        webhooks:
          type: array
          items:
            $ref: '#/components/schemas/Webhook'
      required:
        - webhooks

    Webhook:
      type: object
      properties:
        webhook_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        party_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        name:
          type: string
        description:
          type: string
        url:
          type: string
        status:
          $ref: "#/components/schemas/WebhookStatus"
        events:
          type: array
          example: [ "artifact.invoice.created", "payout.paid" ]
          items:
            $ref: '#/components/schemas/WebhookEventType'
        authentication:
          $ref: "#/components/schemas/WebhookApiAuthentication"
      required:
        - party_id
        - name
        - description
        - url
        - status
        - events
        - authentication


    WebhookResponse:
      type: object
      properties:
        webhook:
          $ref: "#/components/schemas/Webhook"
      required:
        - webhook

    WebhookApiAuthentication:
      type: object
      properties:
        type:
          type: string
          example: bearer_token, basic_auth
        add_position:
          type: string
          example: header, body
        data:
          description: Either "username" and "password" or "token" keys
          example: ' "username": "me@blah.com",  "password": "password:123" '
          additionalProperties:
            type: string
      required:
        - type
        - data

    WebhookStatus:
      type: string
      enum:
        - Unknown
        - Enabled
        - Disabled

    SurchargingStatus:
      description: Controls whether surcharging is enabled or disabled for a firm.
      type: string
      enum:
        - Enabled
        - Disabled

    WebhookSendStatus:
      type: string
      description: Webhook send status
      enum:
        - sent
        - failed

    EventTopics:
      type: object
      properties:
        event_topics:
          type: array
          items:
            type: string
      required:
        - event_topics

    ErrorResponse:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        type:
          type: string
        error_context:
          type: object
          description: Optional fields, may be populated with additional context of the error.
          properties:
            code:
              type: string
            decline_code:
              type: string


    Event:
      type: object
      properties:
        webhook_event_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        externalId:
          type: string
          description: The id of the firm the webhook was related to.
        topic:
          type: string
          description: The topic of the event.
        status:
          $ref: "#/components/schemas/WebhookSendStatus"
        payload:
          type: object
          additionalProperties: true
          description: The webhooks payload and metadata about how and when the data was sent.
        sent_at:
          type: string
          format: date-time
          description: The timestamp the webhook send was attempted.
      required:
        - webhook_event_id
        - topic
        - sent_at
        - status
        - payload
        - externalId

    Events:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/Event"
        filters:
          $ref: "#/components/schemas/EventFilters"
      required:
        - events

    EventFilters:
      type: object
      properties:
        status:
          type: string
          example: sent, failed, all
        topic:
          type: string
          example: none, {userSupplied}
        since:
          type: string
          format: date-time
      required:
        - status
        - topic
        - since

    FirmResponse:
      type: object
      properties:
        firm:
          $ref: '#/components/schemas/Firm'
      required:
        - firm

    Firm:
      type: object
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        trading_name:
          type: string
        status:
          type: string
          enum:
            - Synced
            - InProgress
            - Denied
      required:
        - firm_id
        - trading_name
        - status

    BankAccount:
      type: object
      properties:
        account_id:
          description: The FeeWise ID of the bank account, not required when creating an account.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        account_type:
          $ref: "#/components/schemas/AccountType"
        account_name:
          description: The name attached to the bank account.
          type: string
        account_holder_type:
          description: The type of account holder.
          type: string
          enum:
            - Company
            - Individual
        account_number:
          description: The bank's account number.
          type: string
        branch_code:
          description: The bank's branch code.
          type: string
        address:
          description: The bank's address.
          type: string
        alias:
          description: The name of the account for the Firm, as it will be displayed in the FeeWise firm app.
          type: string
        bank:
          description: Name of the bank
          type: string
        country_code:
          description: Two-letter ISO code representing the country the bank account is located in.
          type: string
        is_default:
          description: Will be set to true, if the account is the default for this type (e.g. Office, Trust)
          type: boolean

        default_accounts:
          type: array
          items:
            type: string
            enum:
              - Billing
              - Office
              - Trust
      required:
        - country_code
        - account_name
        - account_type
        - account_holder_type
        - account_number
        - branch_code

    BankAccountResponse:
      type: object
      properties:
        bank_account:
          $ref: '#/components/schemas/BankAccount'
      required:
        - bank_account

    BankAccountsResponse:
      type: object
      properties:
        office_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        trust_accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
      required:
        - office_accounts
        - trust_accounts


    Payment:
      description: Describes a payment coming into the system (client of a firm paying an invoice, trust deposit, ...)
      type: object
      properties:
        transaction_id:
          type: string
          description: The unique id of this single transaction in the payout.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_id:
          type: string
          description: The id of the payment. nb A single payment may contain multiple transactions and may not be unique.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_type:
          $ref: '#/components/schemas/PaymentMethod'
        artifact_id:
          description: The artifact (Invoice, TrustDeposit, ...) the payment is in relation to.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        reference:
          description: The artifact reference.
          type: string
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        external_id:
          type: string
          description: This is the id of the artifact supplied by the channel partner / PMS.
        external_payment:
          description: |
            If the payment.payment_type is 'External', the external_payment property *may* be available.            
            The values for these properties are supplied in the call to 'RecordExternalPayment'
          type: object
          properties:
            type:
              type: string
              description: The type supplied when the external payment was recorded
            external_id:
              type: string
              description: The id supplied when the external payment was recorded
            details:
              type: string
              description: The details supplied when the external payment was recorded
        received:
          type: string
          description: The amount received from the client.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "1000.00"
        refunded:
          type: string
          description: The amount refunded (back to the client) against this payment.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "200.00"
        paid_out:
          type: string
          description: The total amount paid to the firm for this payment
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "800.00"
        currency:
          type: string
          description: The currency the payment was made in.
        date:
          description: When the payment was made.
          type: string
          format: date-time
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            metadata that the partner has attached to the original artifact (charge, invoice, trust deposit, etc)
          type: object
      required:
        - payment_id
        - transaction_id
        - artifact_id
        - artifact_type
        - paid_out
        - currency
        - date

    Payments:
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: "#/components/schemas/Payment"
      required:
        - payments

    PayoutStatus:
      type: string
      description: |
        Current status of the payout.
        The status changes to paid, if the transaction goes through,
        or to failed or cancelled (within 5 business days)
      enum:
        - None
        - Submitted
        - Paid
        - Failed
        - Cancelled

    Payout:
      description: Describes a payout made by the system to a channel partner's firm
      type: object
      properties:
        payout_reference:
          type: string
          description: The unique reference of the payout. This will appear in the bank account statement the payout was made to.
          example: fw.a1f0cdd52
        date:
          description: When the payout was made.
          type: string
          format: date-time
        payout_total:
          type: string
          description: The total paid out to the firm. This is the sum of the transactions paid_out amounts.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          example: "1000.00"

        account:
          type: object
          properties:
            account_type:
              $ref: '#/components/schemas/AccountType'
            account_id:
              description: FW ID of the settlement account
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/gofrs/uuid
                name: uuid
            branch_code:
              type: string
            account_number:
              type: string
            alias:
              type: string
              description: The name of the account for the PMS
            country_code:
              type: string
              description: Two-letter ISO code representing the country the bank account is located in.
          description: Details of the account the payout is for.
        firm_id:
          type: string
          description: The id of the firm the payout was made to.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        status:
          $ref: '#/components/schemas/PayoutStatus'
        transactions:
          description: A list of the payments that are included in this payout
          type: array
          items:
            $ref: '#/components/schemas/Payment'
      required:
        - payout_reference
        - payout_total
        - firm_id
        - account
        - date
        - transactions
        - status

    Payouts:
      type: object
      properties:
        payouts:
          type: array
          items:
            $ref: "#/components/schemas/Payout"
      required:
        - payouts

    WebhookEventType:
      type: string
      enum:
        - artifact.invoice.created
        - artifact.invoice.updated
        - artifact.trust-deposit.created
        - artifact.trust-deposit.updated
        - artifact.statement.created
        - artifact.charge.created
        - artifact.charge.updated
        - payment.successful
        - payment.processing
        - payment.failed
        - payment.all
        - payment.authorised
        - payout.paid
        - payout.failed
        - firm.status.updated
        - firm.bank-account.updated
        - firm.bank-account.created
        - firm.bank-account.deleted
        - firm.surcharge-settings.updated
        - firm.pricing.updated
        - webhook.failed
        - webhook.sent
        - webhook.triggered
        - webhook.created
        - webhook.updated
        - webhook.deleted

    WebhookEvent:
      type: object
      required:
        - event_type
        - event_id
        - event
      properties:
        event_type:
          $ref: '#/components/schemas/WebhookEventType'
        event_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        created_at:
          type: string
          format: date-time
        event:
          oneOf:
            - $ref: '#/components/schemas/Invoice'
            - $ref: '#/components/schemas/TrustDeposit'
            - $ref: '#/components/schemas/Payment'
            - $ref: '#/components/schemas/Payout'
            - $ref: '#/components/schemas/PaymentAuthorisedEvent'
            - $ref: '#/components/schemas/FirmStatusUpdatedEvent'
            - $ref: '#/components/schemas/PaymentNotificationEvent'
            - $ref: '#/components/schemas/FirmBankAccountEvent'
            - $ref: '#/components/schemas/FirmSurchargeSettingsEvent'
            - $ref: '#/components/schemas/FirmPricingUpdatedEvent'

    ApiKeyRotation:
      type: object
      properties:
        previous_key_expires_hours:
          default: 48
          description: hours until expiry (0 to expire immediately, defaults to 48 hours)
          example: 24
          type: integer
      required:
        - previous_key_expires_hours

    ApiKeyResponse:
      type: object
      properties:
        api_key:
          type: string

    ExternalPayment:
      description: A payment that was made outside of the FeeWise platform.
      type: object
      properties:
        artifact_id:
          description: The artifact (Invoice, TrustDeposit, ...) the payment is in relation to.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        amount:
          description: The amount of the external payment
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        payment_type:
          type: string
          description: Freeform description of the type (eg visa, amex, cash, bank transfer)
        external_id:
          type: string
          description: An ID, external to FeeWise, to identify the payment
        details:
          type: string
          description: Freeform description of the payment (eg "Paid in person with cash - receipt GB-6832" )
      required:
        - artifact_id
        - external_id
        - amount

    MatterStatement:
      type: object
      properties:
        matter:
          $ref: '#/components/schemas/Matter'
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the invoice is raised for.
        debtor:
          $ref: "#/components/schemas/Debtor"
        artifacts:
          type: array
          items:
            $ref: '#/components/schemas/Artifact'
        payment_url:
          type: string
          description: The URI to get the client payment instructions for this matter statement
      required:
        - firm_id
        - matter
        - payment_url
        - artifacts
        - debtor

    DebtorStatement:
      type: object
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm the artifact (invoice, trust deposit etc...) is raised for.
        debtor:
          $ref: "#/components/schemas/Debtor"
        matters:
          type: array
          items:
            $ref: '#/components/schemas/MatterSummary'
        payment_url:
          type: string
          description: The URI to get the client payment instructions for this debtor statement
      required:
        - firm_id
        - debtor

    CardPayment:
      type: object
      properties:
        scheme:
          type: string
          description: Card scheme (e.g. Visa, Mastercard)
        scheme_partial_number:
          type: string
          description: Partial card number
        funding_type:
          type: string
          description: Funding type (e.g. credit, debit)
        country:
          type: string
          description: Country code (e.g. US, CA)
        expiration_date:
          type: string
          format: date-time


    DebitPayment:
      type: object
      properties:
        scheme:
          type: string
          description: Scheme (e.g. us_bank_account, au_bsb_account)
        country:
          type: string
          description: Country code (e.g. US, CA)
        bank_name:
          type: string
          description: Name of the bank
        account_name:
          type: string
          description: Name of the account holder
        branch_code:
          type: string
          description: Bank branch code
        account_partial_number:
          type: string
          description: Partial account number


    ArtifactReceipt:
      type: object
      description: An artifact (invoice, matter, deposit, etc...), which also contains the payment receipt id
      properties:
        receipt_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The receipt ID
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b55"
        matter_external_id:
          type: string
          description: The external matter ID of the attached matter
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b55"
        matter_external_reference:
          type: string
          description: The external matter reference of the attached matter
          example: "matter123"
        artifact_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The artifact ID
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b56"
        artifact_type:
          $ref: '#/components/schemas/ArtifactType'
        external_id:
          type: string
          description: The external ID
          example: "external123"
        name:
          type: string
          description: The artifact name
          example: "Artifact Name"
        description:
          type: string
          description: The artifact description
          example: "Artifact Description"
        amount_paid:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The amount paid for the artifact
          example: "100.00"
        account:
          type: object
          description: Details of the settlement account
          properties:
            account_type:
              $ref: '#/components/schemas/AccountType'
            branch_code:
              type: string
            account_number:
              type: string
            account_id:
              description: FW ID of the settlement account
              type: string
              format: uuid
              x-go-type: uuid.UUID
              x-go-type-import:
                path: github.com/gofrs/uuid
                name: uuid
            alias:
              type: string
              description: The name of the account for the Firm
            country_code:
              type: string
              description: The country the account is in
          required:
            - account_type
            - branch_code
            - account_number
            - country_code
      required:
        - receipt_id
        - artifact_id
        - artifact_type
        - external_id
        - name
        - amount_paid
        - account

    PaymentAuthorisedEvent:
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: "#/components/schemas/ArtifactReceipt"
        payment_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The payment ID
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b54"
        amount_paid:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The amount paid
          example: "125.00"
        card_payment:
          $ref: "#/components/schemas/CardPayment"
        debit_payment:
          $ref: "#/components/schemas/DebitPayment"
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm ID
          example: "8b14c470-f6df-4522-9dc6-8fc2bb59fc6f"
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        payment_method_detail:
          type: string
          description: The payment method detail
          example: "Visa ending in 1234"
      required:
        - amount_paid
        - payment_id
        - artifacts
        - firm_id
        - payment_method

    Charge:
      type: object
      description: |
        A Charge is created to request payment.
        Either the settlement_account_type or the settlement_account_id must be provided but not both.
      properties:
        charge_id:
            type: string
            description: |
              This is the uuid of the charge. This will be used for a 'GET' of the charge and in webhooks about this charge.
              NB: this is generated and must not be supplied when creating an charge.
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid
        firm_id:
          type: string
          description: The firm the charge is being created for.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        external_id:
          type: string
          description: This is the id supplied by the channel partner / PMS and can be used for filtering charges. This should be unique for the PMS but this is not enforced.
          example: e69f9433-885b-4321-bb48-9f5084850893
        external_reference:
          type: string
          description: This a reference supplied by the channel partner / PMS and can be used for filtering charges.
          example: charge-123
        amount:
          type: string
          description: The total amount the charge is for.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        amount_due:
          type: string
          description: The total amount outstanding on this charge.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        currency:
          $ref: "#/components/schemas/Currency"
        due_date:
          type: string
          format: date-time
        settlement_account_type:
          $ref: "#/components/schemas/AccountType"
        settlement_account_id:
          description: |
            The id of the account the charge should be paid to.
            NB: if both the settlement_account_type and settlement_account_id are specified, it is a bad request.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        notes:
          description: Any notes relevant to the charge.
          type: array
          items:
            type: string
        payment_methods_override:
          type: array
          items:
            $ref: '#/components/schemas/PaymentMethod'
        description:
          type: string
          description: Description of the charge.
        store_payment_methods:
          type: array
          description: Choose which payment methods to save when the customer pays a charge.
          items:
            $ref: '#/components/schemas/PaymentMethod'
        surcharge_choice_override:
          $ref: '#/components/schemas/SurchargeChoice'
        payment_uri:
          type: string
          description: The URI to pay the charge.
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            Set of key value pairs that you can attach to an object. Useful for storing additional information about the object in a structured format.
          type: object

      required:
        - amount

    SplitCharge:
      description: |
        A Split Charge enables a single payment to be distributed among multiple firm bank accounts.
        nb: Either the settlement_account_type or the settlement_account_id must be provided in each charge but not both.
      type: object
      properties:
        split_charge_id:
          type: string
          description: |
            This is the uuid of the charge. This will be used for a 'GET' of the split charge and in webhooks about this split charge.
            NB: this is generated and must NOT be supplied when creating a split charge.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        firm_id:
          type: string
          description: The firm the charge is being created for.
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        amount:
          type: string
          description: The total amount the split charge is for. This amount should match the total for each charge being split.
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        matter:
          $ref: "#/components/schemas/Matter"
        debtor:
          $ref: "#/components/schemas/Debtor"
        charges:
          type: array
          items:
            $ref: '#/components/schemas/Charge'
        description:
          type: string
          description: Description of the split charge.
        payment_uri:
            type: string
            description: The URI to allow the end user to pay the split charges.
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            Set of key value pairs that you can attach to an object. Useful for storing additional information about the object in a structured format.
          type: object


    ChargeResponse:
      type: object
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
      required:
        - charge

    SplitChargesResponse:
      type: object
      properties:
        splitCharge:
          $ref: '#/components/schemas/SplitCharge'
      required:
        - splitCharge

    ChargeAndPayResponse:
      type: object
      properties:
        charge:
          $ref: '#/components/schemas/Charge'
        payment_id:
          description: The unique ID for this charges payment
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid

    CustomerDetails:
      type: object
      properties:
        debtor:
          $ref: '#/components/schemas/Debtor'
        payment_methods:
          type: array
          items:
            $ref: '#/components/schemas/CustomerPaymentMethod'
      required:
      - debtor

    CustomerPaymentMethod:
      type: object
      properties:
        payment_token:
          description: The unique ID for this customer's payment method, this can be used to charge the associated customer
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        card:
            $ref: '#/components/schemas/CardPayment'
        debit:
            $ref: '#/components/schemas/DebitPayment'

    CustomersResponse:
      type: object
      properties:
        customers:
          type: array
          items:
            $ref: '#/components/schemas/CustomerDetails'
      required:
      - customers

    PaymentTokenResponse:
      type: object
      properties:
        debtor:
          $ref: '#/components/schemas/Debtor'
        payment_token:
          description: The unique ID for this customer's payment method, this can be used to charge the associated customer
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        capture_uri:
          type: string
          description: The URI to capture the payment details for this payment token
        token_type:
          $ref: '#/components/schemas/TokenType'

    CreateFirm:
      type: object
      properties:
        company:
          $ref: '#/components/schemas/Company'
        address:
          $ref: '#/components/schemas/Address'
        office_account:
          $ref: '#/components/schemas/BankAccount'
        trust_account:
          $ref: '#/components/schemas/BankAccount'
        roles:
          type: array
          items:
            $ref: '#/components/schemas/Person'
          description: Roles can be either Representative, Executives or Owners.
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
            description: >-
              Set of key value pairs that you can attach to an object. Useful for storing additional information about the object in a structured format.
        terms_of_service:
          $ref: '#/components/schemas/TermsOfService'

      required:
        - company
        - address
        - office_account
        - terms_of_service

    TermsOfService:
      type: object
      description: Document that the firm has signed and provided, e.g. FeeWise Terms of Service
      properties:
        document_name:
          type: string
        accepted:
          type: string
          format: date-time
        accepted_ip:
          type: string
          format: ipv4
      required:
        - document_name
        - accepted
        - accepted_ip


    FirmsResponse:
      type: object
      properties:
        firms:
          type: array
          items:
            $ref: '#/components/schemas/FirmDetails'
      required:
        - firms

    FirmOnboardingStatus:
          type: string
          description: Firm's status.
          enum:
            - Pending
            - Awaiting
            - Active
            - Closed

    FirmDetails:
      type: object
      properties:
        company:
          $ref: '#/components/schemas/Company'
        address:
          $ref: '#/components/schemas/Address'
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/BankAccount'
        roles:
          type: array
          description: |
            Must have one and only one representative.  Representative person is an authorised person who represents the firms. The representative must be either an executive or owner.
            All owners of the firm with greater that 25% must be specified.
          items:
            $ref: '#/components/schemas/Person'
        terms_of_service:
          $ref: '#/components/schemas/TermsOfService'
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            Set of key value pairs attached to the firm object when it was created.
          type: object
        surcharge_settings:
          $ref: "#/components/schemas/SurchargeSettings"

      required:
        - company
        - address
        - accounts

    Company:
      type: object
      properties:
        firm_id:
          description: | 
              Create the company details for a firm.
              NB the field `firm_id`, must NOT be supplied during `create`. If supplied, BadResponse will be returned.
              The firm_id is used by FeeWise to refer to a firm. It is populated once the firm has been created and will be available in the response. (or any GET Firm requests)
              See external_id
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          description: Allows callers to use their own system id, for the firm. external_id will always be returned in any responses, where a FeeWise Firm is returned.
          type: string
        legal_name:
          type: string
        legal_identifier:
          description: The identification number given to a company when it is registered or incorporated, if distinct from the identification number used for filing taxes.
          type: string
        legal_structure:
          description: This is a US specific required field.
          type: string
          enum:
            - MultiMemberLLC
            - PrivateCorporation
            - PrivatePartnership
            - PublicCorporation
            - PublicPartnership
            - SingleMemberLLC
            - SoleProprietorship
            - UnincorporatedAssociation
            - Individual
        tax_id:
          description: The business ID number of the company, as appropriate for the company’s country.
            Employer ID Number in US, Business Number in CA, Company House Registration Number in UK and Australian Business Number in AU.
          type: string
        trading_name:
          type: string
        website:
          type: string
          format: uri
        support_email:
          type: string
        support_number:
          type: string
        contact_email:
          type: string
          format: email
        contact_number:
          type: string
        billing_email:
          type: string
          format: email
        billing_number:
          type: string
        status:
          $ref: '#/components/schemas/FirmOnboardingStatus'
      required:
        - legal_name
        - legal_structure
        - tax_id
        - trading_name
        - contact_number
        - contact_email
        - billing_email
        - website


    Address:
      type: object
      properties:
        address1:
          type: string
        address2:
          type: string
        city:
          type: string
        state_code:
          type: string
        postal_code:
          type: string
        country_code:
          type: string
          description: Two-letter ISO code representing the country.
      required:
        - address1
        - city
        - state_code
        - postal_code
        - country_code

    Person:
      type: object
      properties:
        person_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        first_name:
          type: string
        middle_name:
          type: string
        last_name:
          type: string
        title:
          type: string
        phone:
          type: string
        national_id:
          type: string
          description: |
            This field may be required to be populated, depending on the region. 
            For the US , this is the social security number, and is required.
            For CA, this is the social insurance number.
            For AU, this is the tax file number or driving licence number.
            For UK, this is the national insurance number.
        email:
          type: string
          format: email
        address:
          $ref: '#/components/schemas/Address'
        date_of_birth:
          type: string
          format: date
        is_executive:
          type: boolean
          description: Indicates if the individual bears substantial responsibility for controlling, managing, or directing the organization.
        is_representative:
          type: boolean
          description: Representative refers to the designated primary representative of the account, authorized by the business to provide both personal information about themselves and general details about the account. It is essential to note that there can only be one representative assigned to the account at any given time, and during the account creation, this role is typically assigned to the individual responsible for opening the account.
        is_director:
          type: boolean
          description: Indicates if the individual is a director of the organization. Directors are typically members of the governing board of the company.
        ownership_percentage:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The percent owned of firm's legal entity owned by the person.
        ssn_last_4:
          type: string
          description: The last four digits of the person's Social Security number, US only
      required:
        - first_name
        - last_name
        - email
        - date_of_birth
        - address
        - title
        - is_executive
        - is_representative

    MetadataSearch:
      type: object
      properties:
        key:
          type: string
        value:
          type: string

    FirmStatusUpdatedEvent:
      type: object
      properties:
        firm_id:
          description: FeeWise' unique ID for the firm
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        external_id:
          description: Unique ID for the firm, set by partners
          type: string
        legal_name:
          type: string
        trading_name:
          type: string
        status:
          $ref: '#/components/schemas/FirmOnboardingStatus'
        metadata:
          # TODO: refactor to use ChannelPartnerMetadata
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            Set of key value pairs attached to the firm object when it was created.
          type: object

    ChannelPartnerMetadata:
      type: object
      description: >-
        Set of key value pairs attached to the object when it was created.
      additionalProperties:
        maxLength: 500
        type: string

    FirmBankAccountEvent:
      type: object
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        account_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        account_type:
          $ref: "#/components/schemas/AccountType"
        account_name:
          type: string
        account_holder_type:
          type: string
          enum:
            - Company
            - Individual
        account_number:
          type: string
        branch_code:
          type: string
        address:
          type: string
        alias:
          type: string
        bank:
          type: string
        country_code:
          type: string
          description: Two-letter ISO code representing the country the bank account is located in.
        last_updated_at:
          type: string
          format: date-time
        status:
          type: string
          description: The status of the bank account. 
            Pending - awaiting validation,
            Valid - successfully validated,
            Invalid - bank account number validation failed.
          enum:
            - Pending
            - Valid
            - Invalid
        metadata:
          $ref: '#/components/schemas/ChannelPartnerMetadata'
      required:
        - country_code
        - account_name
        - account_type
        - account_holder_type
        - account_number
        - branch_code
        - metadata

    FirmSurchargeSettingsEvent:
      type: object
      description: A webhook event that's emitted whenever a firm's surcharge settings are updated.
      required:
        - firm_id
        - surcharge_settings
        - metadata
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        surcharge_settings:
          $ref:  "#/components/schemas/SurchargeSettings"
        metadata:
          $ref: '#/components/schemas/ChannelPartnerMetadata'
          
    FirmPricingUpdatedEvent:
      type: object
      description: A webhook event that's emitted whenever a firm's pricing settings are changed.
      required:
        - firm_id
        - products
      properties:
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        metadata:
          $ref: '#/components/schemas/ChannelPartnerMetadata'
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"

    SurchargeSettings:
      type: object
      description: |
        Controls surcharging configuration and availability for a firm

        ## Surcharging availability

        `SurchargingStatus` `Enabled`: 
         * `start_date` is in the future, Surcharging will become available on the specified date
         * `start_date` is in the past,   Surcharging is immediately available
        
        `SurchargingStatus` `Disabled`, Surcharging is not available (regardless of the `start_date`) 

        ## Access
        Information is available in both:
          * `FirmSurchargeSettingsEvent` webhooks
          * The firm details endpoint (in the `surcharge_settings` field)

        ## Webhooks 
        Any change to the `SurchargingStatus` field will trigger a `FirmSurchargeSettingsEvent` webhook to all subscribers.
      properties:
        surcharged_artifacts:
          description: Specifies which types of artifacts can have surcharges applied
          type: array
          items:
            $ref: "#/components/schemas/ArtifactType"
        surcharge_trust_payments:
          description: Determines whether Trust payments are subject to surcharging.
          type: boolean
        start_date:
          description: The date and time when surcharging becomes active (when status is Enabled).
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/SurchargingStatus"

      required:
      - surcharged_artifacts
      - surcharge_trust_payments
      - status

    SurchargeSettingsResponse:
      type: object
      properties:
        surcharge_settings:
          $ref: '#/components/schemas/SurchargeSettings'

    PartyBranding:
      description: Branding for a party (firm or channel partner)
      type: object
      properties:
        logo:
          type: string
        icon:
          type: string
        colour:
          type: string
        brand_primary_colour:
          type: string
        main_text_colour:
          type: string
        table_header_background_colour:
          type: string
        table_header_text_colour:
          type: string


    PayoutsResponse:
      type: object
      properties:
        payouts:
          type: array
          items:
            $ref: '#/components/schemas/Payout'
        pagination_metadata:
          $ref: '#/components/schemas/PaginationMetadata'

    TransactionResponse:
      type: object
      properties:
        transaction:
          $ref: '#/components/schemas/Transaction'
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: ID of the firm that the transaction is associated with.
          example: "8b14c470-f6df-4522-9dc6-8fc2bb59fc6f"
      required:
        - transaction
        - firm_id

    TransactionsResponse:
      type: object
      deprecated: true
      description: Prefer TransactionsResponseV2, used in the v4 /transactions endpoint
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Transaction'
        pagination_metadata:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - transactions

    TransactionsResponseV2:
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/TransactionV2'
        pagination_metadata:
          $ref: '#/components/schemas/PaginationMetadata'
      required:
        - transactions

    Transaction:
      type: object
      deprecated: true
      description: Paginated transaction - prefer TransactionV2, used in the v4 /transactions endpoint
      properties:
        payment_reference:
          description: UUID of the payment intent (in FeeWise). This is the Payment id shown in the payment receipt.
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        account_id:
          description: FW ID of the settlement account
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payout_id:
          description: ID of the payout (if paid out).
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        payout_date:
          description: Timestamp when the associated payout was made to the firm from FeeWise.
          type: string
          format: date-time
        reference:
          description: The artifact reference.
          type: string
        debtor:
          $ref: "#/components/schemas/Debtor"
        matter_reference:
          description: The name of the matter the payment is made for.
          type: string
        matter_description:
          description: The description of the matter the payment is made for.
          type: string
        payment_date:
          description: Timestamp when the payment was made by the client.
          type: string
          format: date-time
        customer_payment_method:
          $ref: "#/components/schemas/CustomerPaymentMethod"
        account_alias:
          description: The account alias (name).
          type: string
        account_type:
          $ref: '#/components/schemas/AccountType'
        amount:
          description: Amount paid (received from client gross)
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        status:
          $ref: '#/components/schemas/TransactionStatus'
        payer_details:
          $ref: "#/components/schemas/Payer"
        client_reference:
          type: string
          description: Only present if the artifact is of type payment link
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            metadata that the partner has attached to the original artifact (charge, invoice, trust deposit, etc)
          type: object
      required:
        - payment_reference
        - payment_date
        - reference
        - account_alias
        - account_type
        - amount
        - status

    TransactionV2:
      description: Inherits all properties of transaction and adds the transaction_uri field
      allOf:
        - $ref: "#/components/schemas/Transaction"
        - type: object
          properties:
            transaction_uri:
              description: |
                A direct URL to view this transaction in the FeeWise dashboard.
                
                Integration note: When embedding this link in your Practice Management System (PMS),
                  prefix it with your magic link URL to maintain authentication context.
                Refer to the "Magic Links" documentation section for implementation details.
              type: string
              format: uri
            funding_type:
              description: The funding type for card payments e.g Credit, Debit
              type: string
            surcharged:
              type: boolean
              description: Indicates if the transaction was surcharged
            surcharged_amount:
              description: Surcharge amount the customer paid for this transaction
              type: string
              format: decimal
              x-go-type: decimal.Decimal
              x-go-type-import:
                path: github.com/shopspring/decimal
            refundable:
              type: boolean
              description: Indicates if this transaction can be refunded
            refund:
              $ref: '#/components/schemas/Refund'

    Refund:
      type: object
      properties:
        refund_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        created_at:
          type: string
          format: date-time
        status:
          $ref: "#/components/schemas/RefundStatus"
        refund_amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        surcharge_amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
      example:
        refund_id: 550e8400-e29b-41d4-a716-446655440000
        payment_id: 71a54300-84b7-4f4d-a1a3-278ea450ba59
        artifact_id: 123e4567-e89b-12d3-a456-426614174000
        debit_account_id: 7c6f6da3-5a2d-4f2c-8b3e-9a9d4e8c7b6a
        created_at: "2024-01-23T14:30:00Z"
        status: Requested
        refund_amount: "150.00"
        surcharge_amount: "4.35"
        updated_by_user: John Smith
        refund_reason: Client overpaid invoice
        firm_notes: Client accidentally paid twice

    RefundStatus:
      type: string
      enum:
        - Requested
        - Processing
        - Clearing
        - Complete
        - Failed
        - CancelledInternal
        - CancelledFirm



    TransactionStatus:
      type: string
      enum:
        - Initialised   # Payment incomplete
        - Processing    # Payment complete but not available
        - Clearing      # Payment marked as complete which has been included in a payout that is not finished
        - Paid          # In a payout marked as paid
        - Failed        # In a failed payout

    PaginationMetadata:
      description: |
        Metadata about the pagination of a list of objects.
        Returned in the response body of any paginated list.
      type: object
      properties:
        requested_page:
          type: integer
          description: The requested page number

        requested_page_size:
          type: integer
          description: Records per page.

        requested_from_date:
          type: string
          format: date-time
          description: The requested from date
          example: '2023-12-01T00:00:00.000Z'

        requested_to_date:
          type: string
          format: date-time
          description: The requested to date
          example: '2023-12-31T00:00:00.000Z'

        requested_sort_by:
          type: string
          description: Field that the records were requested to be sorted by.

        requested_status_filter:
          type: array
          items:
            type: string
          description: Status that the records were requested to be filtered with.

        requested_account_id_filter:
          type: array
          description: Account IDs that the results were filtered with
          items:
            type: string
            format: uuid
            x-go-type: uuid.UUID
            x-go-type-import:
              path: github.com/gofrs/uuid
              name: uuid

        requested_sort_order:
          type: string
          description: Order the records are sorted by, using the sort_by property
          enum:
            - asc
            - desc
          default: asc

        current_page_start_index:
          type: integer
          description: |
            Index of the first record on the current page. 
            E.g. To render- Items 1-10, on page 1, 11-20 on page 2, etc.

        current_page_end_index:
          type: integer
          description: |
            Index of the last record on the current page. 
            E.g. To render- Items 1-10, on page 1, 11-20 on page 2, etc.

        total_records:
          type: integer
          description: Total number of records returned.

        total_pages:
          type: integer
          description: Total number of pages returned. TODO

        first_page:
          type: integer
          description: Number of the first page. TODO

        last_page:
          type: integer
          description: Number of the last page. TODO


    PaymentNotificationEvent:
      type: object
      properties:
        artifacts:
          type: array
          items:
            $ref: "#/components/schemas/ArtifactReceipt"
        payment_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The payment ID
          example: "7cf0f73e-4bf4-4f51-8cb4-8db2fcb91b54"
        amount_paid:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The amount paid
          example: "125.00"
        card_payment:
          $ref: "#/components/schemas/CardPayment"
        debit_payment:
          $ref: "#/components/schemas/DebitPayment"
        firm_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
          description: The firm ID
          example: "8b14c470-f6df-4522-9dc6-8fc2bb59fc6f"
        payment_method:
          $ref: '#/components/schemas/PaymentMethod'
        payment_method_detail:
          type: string
          description: The payment method detail
          example: "Visa ending in 1234"
        payment_status:
          type: string
          description: The status of the payment.
            Card payments have either a Successful or Failed status.
            Direct Debit payments can have a Processing, Successful or Failed status.
          enum:
            - Successful
            - Processing
            - Failed
            - N/A
        failure_message:
          type: string
          description: When the payment_status is Failed
            this will show the reason for payment failure.
            E.g. Card does not have sufficient funds.
        metadata:
          additionalProperties:
            maxLength: 500
            type: string
          description: >-
            Set of key value pairs attached to the payment object when it was created.
          type: object
      required:
        - amount_paid
        - payment_id
        - artifacts
        - firm_id
        - payment_method
        - payment_status

    ProductType:
      type: string
      enum:
        - CardStandardCredit
        - CardStandardDebit
        - CardSpecialtyCredit
        - CardSpecialtyDebit
        - CardPremiumCredit
        - CardPremiumDebit
        - ACH
        - PAD
        - BACS

    Product:
      description: Payment Products, used in the partner api
      type: object
      required:
        - type
        - payment_method
        - brands
        - upper_bound
        - lower_bound
        - customer_variable_fee
        - customer_fixed_fee
      properties:
        type:
          $ref: "#/components/schemas/ProductType"
        payment_method:
          $ref: "#/components/schemas/PaymentMethod"
        brands:
          type: array
          items:
            type: string
          example: [ "visa", "mastercard" ]
        lower_bound:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The minimum pricing amount.
          example: "0.00"
        upper_bound:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
          description: The maximum pricing amount.
          example: "5000.00"
        customer_variable_fee:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        customer_fixed_fee:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        example_price:
          $ref: "#/components/schemas/ExamplePrice"

    UpdatedCount:
      type: object
      properties:
        updated:
          type: integer
      required:
        - updated

    PaymentDetails:
      type: object
      properties:
        payment_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        artifact_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid
        session_id:
          type: string
          format: uuid
          x-go-type: uuid.UUID
          x-go-type-import:
            path: github.com/gofrs/uuid
            name: uuid            
        amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        subtotal:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        date:
          type: string
          format: date-time
        customer_fee_amount:
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        customer_fee_pricing:
          type: string
          description: the pricing of the customer fee e.g. 2.9% + $0.2
        payment_method:
          $ref: "#/components/schemas/PaymentMethod"
        payer_details:
          $ref: '#/components/schemas/Payer'
        card_details:
          $ref: '#/components/schemas/CardPayment'
        direct_debit_details:
          $ref: '#/components/schemas/DebitPayment'

    ChargePaymentDetails:
      type: object
      properties:
        charge:
          $ref: "#/components/schemas/Charge"
        payment_details:
          $ref: "#/components/schemas/PaymentDetails"

    ExamplePrice:
      type: object
      description: |
        When calling an endpoint that returns example prices, this object is returned containing the amount that was passed in and the resulting price.
      required:
        - amount
        - total
      properties:
        amount:
          description: The amount the example price is based on - the amount that was passed in with the original request.
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
        total:
          description: The total amount charged to be charged to the customer, including all fees.
          type: string
          format: decimal
          x-go-type: decimal.Decimal
          x-go-type-import:
            path: github.com/shopspring/decimal
      example:
        amount: "100.00"
        total: "103.10"
